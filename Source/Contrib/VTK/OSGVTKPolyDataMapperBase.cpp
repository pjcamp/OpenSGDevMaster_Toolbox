/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VTKPolyDataMapper!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGNode.h"                    // Root Class
#include "OSGGeometry.h"                // Geometries Class
#include "OSGChunkMaterial.h"           // Materials Class
#include "OSGMaterialChunk.h"           // MaterialChunks Class
#include "OSGGeoPnt3fProperty.h"        // Positions Class
#include "OSGGeoUInt32Property.h"       // Length Class
#include "OSGGeoUInt8Property.h"        // Types Class
#include "OSGGeoColor4fProperty.h"      // Colors Class
#include "OSGGeoVec3fProperty.h"        // Normals Class

#include "OSGVTKPolyDataMapperBase.h"
#include "OSGVTKPolyDataMapper.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VTKPolyDataMapper
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Node *          VTKPolyDataMapperBase::_sfRoot
    
*/

/*! \var Node *          VTKPolyDataMapperBase::_mfGeoRoots
    
*/

/*! \var Geometry *      VTKPolyDataMapperBase::_mfGeometries
    
*/

/*! \var ChunkMaterial * VTKPolyDataMapperBase::_mfMaterials
    
*/

/*! \var MaterialChunk * VTKPolyDataMapperBase::_mfMaterialChunks
    
*/

/*! \var GeoPnt3fProperty * VTKPolyDataMapperBase::_mfPositions
    
*/

/*! \var GeoUInt32Property * VTKPolyDataMapperBase::_mfLength
    
*/

/*! \var GeoUInt8Property * VTKPolyDataMapperBase::_mfTypes
    
*/

/*! \var GeoColor4fProperty * VTKPolyDataMapperBase::_mfColors
    
*/

/*! \var GeoVec3fProperty * VTKPolyDataMapperBase::_mfNormals
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<VTKPolyDataMapper *>::_type("VTKPolyDataMapperPtr", "GroupPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(VTKPolyDataMapper *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           VTKPolyDataMapper *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           VTKPolyDataMapper *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void VTKPolyDataMapperBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "root",
        "",
        RootFieldId, RootFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VTKPolyDataMapper::editHandleRoot),
        static_cast<FieldGetMethodSig >(&VTKPolyDataMapper::getHandleRoot));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecNodePtr::Description(
        MFUnrecNodePtr::getClassType(),
        "geoRoots",
        "",
        GeoRootsFieldId, GeoRootsFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&VTKPolyDataMapper::editHandleGeoRoots),
        static_cast<FieldGetMethodSig >(&VTKPolyDataMapper::getHandleGeoRoots));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecGeometryPtr::Description(
        MFUnrecGeometryPtr::getClassType(),
        "geometries",
        "",
        GeometriesFieldId, GeometriesFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&VTKPolyDataMapper::editHandleGeometries),
        static_cast<FieldGetMethodSig >(&VTKPolyDataMapper::getHandleGeometries));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChunkMaterialPtr::Description(
        MFUnrecChunkMaterialPtr::getClassType(),
        "materials",
        "",
        MaterialsFieldId, MaterialsFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&VTKPolyDataMapper::editHandleMaterials),
        static_cast<FieldGetMethodSig >(&VTKPolyDataMapper::getHandleMaterials));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecMaterialChunkPtr::Description(
        MFUnrecMaterialChunkPtr::getClassType(),
        "materialChunks",
        "",
        MaterialChunksFieldId, MaterialChunksFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&VTKPolyDataMapper::editHandleMaterialChunks),
        static_cast<FieldGetMethodSig >(&VTKPolyDataMapper::getHandleMaterialChunks));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecGeoPnt3fPropertyPtr::Description(
        MFUnrecGeoPnt3fPropertyPtr::getClassType(),
        "positions",
        "",
        PositionsFieldId, PositionsFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&VTKPolyDataMapper::editHandlePositions),
        static_cast<FieldGetMethodSig >(&VTKPolyDataMapper::getHandlePositions));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecGeoUInt32PropertyPtr::Description(
        MFUnrecGeoUInt32PropertyPtr::getClassType(),
        "length",
        "",
        LengthFieldId, LengthFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&VTKPolyDataMapper::editHandleLength),
        static_cast<FieldGetMethodSig >(&VTKPolyDataMapper::getHandleLength));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecGeoUInt8PropertyPtr::Description(
        MFUnrecGeoUInt8PropertyPtr::getClassType(),
        "types",
        "",
        TypesFieldId, TypesFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&VTKPolyDataMapper::editHandleTypes),
        static_cast<FieldGetMethodSig >(&VTKPolyDataMapper::getHandleTypes));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecGeoColor4fPropertyPtr::Description(
        MFUnrecGeoColor4fPropertyPtr::getClassType(),
        "Colors",
        "",
        ColorsFieldId, ColorsFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&VTKPolyDataMapper::editHandleColors),
        static_cast<FieldGetMethodSig >(&VTKPolyDataMapper::getHandleColors));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecGeoVec3fPropertyPtr::Description(
        MFUnrecGeoVec3fPropertyPtr::getClassType(),
        "normals",
        "",
        NormalsFieldId, NormalsFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&VTKPolyDataMapper::editHandleNormals),
        static_cast<FieldGetMethodSig >(&VTKPolyDataMapper::getHandleNormals));

    oType.addInitialDesc(pDesc);
}


VTKPolyDataMapperBase::TypeObject VTKPolyDataMapperBase::_type(
    VTKPolyDataMapperBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&VTKPolyDataMapperBase::createEmptyLocal),
    VTKPolyDataMapper::initMethod,
    VTKPolyDataMapper::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&VTKPolyDataMapper::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"VTKPolyDataMapper\"\n"
    "\tparent=\"Group\"\n"
    "\tlibrary=\"ContribVTK\"\n"
    "\tstructure=\"concrete\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "        isNodeCore=\"true\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"root\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"geoRoots\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"geometries\"\n"
    "\t\ttype=\"GeometryPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"materials\"\n"
    "\t\ttype=\"ChunkMaterialPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"materialChunks\"\n"
    "\t\ttype=\"MaterialChunkPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"positions\"\n"
    "\t\ttype=\"GeoPnt3fPropertyPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"length\"\n"
    "\t\ttype=\"GeoUInt32PropertyPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"types\"\n"
    "\t\ttype=\"GeoUInt8PropertyPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Colors\"\n"
    "\t\ttype=\"GeoColor4fPropertyPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"normals\"\n"
    "\t\ttype=\"GeoVec3fPropertyPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VTKPolyDataMapperBase::getType(void)
{
    return _type;
}

const FieldContainerType &VTKPolyDataMapperBase::getType(void) const
{
    return _type;
}

UInt32 VTKPolyDataMapperBase::getContainerSize(void) const
{
    return sizeof(VTKPolyDataMapper);
}

/*------------------------- decorator get ------------------------------*/


//! Get the VTKPolyDataMapper::_sfRoot field.
const SFUnrecNodePtr *VTKPolyDataMapperBase::getSFRoot(void) const
{
    return &_sfRoot;
}

SFUnrecNodePtr      *VTKPolyDataMapperBase::editSFRoot           (void)
{
    editSField(RootFieldMask);

    return &_sfRoot;
}

//! Get the VTKPolyDataMapper::_mfGeoRoots field.
const MFUnrecNodePtr *VTKPolyDataMapperBase::getMFGeoRoots(void) const
{
    return &_mfGeoRoots;
}

MFUnrecNodePtr      *VTKPolyDataMapperBase::editMFGeoRoots       (void)
{
    editMField(GeoRootsFieldMask, _mfGeoRoots);

    return &_mfGeoRoots;
}

//! Get the VTKPolyDataMapper::_mfGeometries field.
const MFUnrecGeometryPtr *VTKPolyDataMapperBase::getMFGeometries(void) const
{
    return &_mfGeometries;
}

MFUnrecGeometryPtr  *VTKPolyDataMapperBase::editMFGeometries     (void)
{
    editMField(GeometriesFieldMask, _mfGeometries);

    return &_mfGeometries;
}

//! Get the VTKPolyDataMapper::_mfMaterials field.
const MFUnrecChunkMaterialPtr *VTKPolyDataMapperBase::getMFMaterials(void) const
{
    return &_mfMaterials;
}

MFUnrecChunkMaterialPtr *VTKPolyDataMapperBase::editMFMaterials      (void)
{
    editMField(MaterialsFieldMask, _mfMaterials);

    return &_mfMaterials;
}

//! Get the VTKPolyDataMapper::_mfMaterialChunks field.
const MFUnrecMaterialChunkPtr *VTKPolyDataMapperBase::getMFMaterialChunks(void) const
{
    return &_mfMaterialChunks;
}

MFUnrecMaterialChunkPtr *VTKPolyDataMapperBase::editMFMaterialChunks (void)
{
    editMField(MaterialChunksFieldMask, _mfMaterialChunks);

    return &_mfMaterialChunks;
}

//! Get the VTKPolyDataMapper::_mfPositions field.
const MFUnrecGeoPnt3fPropertyPtr *VTKPolyDataMapperBase::getMFPositions(void) const
{
    return &_mfPositions;
}

MFUnrecGeoPnt3fPropertyPtr *VTKPolyDataMapperBase::editMFPositions      (void)
{
    editMField(PositionsFieldMask, _mfPositions);

    return &_mfPositions;
}

//! Get the VTKPolyDataMapper::_mfLength field.
const MFUnrecGeoUInt32PropertyPtr *VTKPolyDataMapperBase::getMFLength(void) const
{
    return &_mfLength;
}

MFUnrecGeoUInt32PropertyPtr *VTKPolyDataMapperBase::editMFLength         (void)
{
    editMField(LengthFieldMask, _mfLength);

    return &_mfLength;
}

//! Get the VTKPolyDataMapper::_mfTypes field.
const MFUnrecGeoUInt8PropertyPtr *VTKPolyDataMapperBase::getMFTypes(void) const
{
    return &_mfTypes;
}

MFUnrecGeoUInt8PropertyPtr *VTKPolyDataMapperBase::editMFTypes          (void)
{
    editMField(TypesFieldMask, _mfTypes);

    return &_mfTypes;
}

//! Get the VTKPolyDataMapper::_mfColors field.
const MFUnrecGeoColor4fPropertyPtr *VTKPolyDataMapperBase::getMFColors(void) const
{
    return &_mfColors;
}

MFUnrecGeoColor4fPropertyPtr *VTKPolyDataMapperBase::editMFColors         (void)
{
    editMField(ColorsFieldMask, _mfColors);

    return &_mfColors;
}

//! Get the VTKPolyDataMapper::_mfNormals field.
const MFUnrecGeoVec3fPropertyPtr *VTKPolyDataMapperBase::getMFNormals(void) const
{
    return &_mfNormals;
}

MFUnrecGeoVec3fPropertyPtr *VTKPolyDataMapperBase::editMFNormals        (void)
{
    editMField(NormalsFieldMask, _mfNormals);

    return &_mfNormals;
}



void VTKPolyDataMapperBase::pushToGeoRoots(Node * const value)
{
    editMField(GeoRootsFieldMask, _mfGeoRoots);

    _mfGeoRoots.push_back(value);
}

void VTKPolyDataMapperBase::assignGeoRoots (const MFUnrecNodePtr    &value)
{
    MFUnrecNodePtr   ::const_iterator elemIt  =
        value.begin();
    MFUnrecNodePtr   ::const_iterator elemEnd =
        value.end  ();

    static_cast<VTKPolyDataMapper *>(this)->clearGeoRoots();

    while(elemIt != elemEnd)
    {
        this->pushToGeoRoots(*elemIt);

        ++elemIt;
    }
}

void VTKPolyDataMapperBase::removeFromGeoRoots(UInt32 uiIndex)
{
    if(uiIndex < _mfGeoRoots.size())
    {
        editMField(GeoRootsFieldMask, _mfGeoRoots);

        _mfGeoRoots.erase(uiIndex);
    }
}

void VTKPolyDataMapperBase::removeObjFromGeoRoots(Node * const value)
{
    Int32 iElemIdx = _mfGeoRoots.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(GeoRootsFieldMask, _mfGeoRoots);

        _mfGeoRoots.erase(iElemIdx);
    }
}
void VTKPolyDataMapperBase::clearGeoRoots(void)
{
    editMField(GeoRootsFieldMask, _mfGeoRoots);


    _mfGeoRoots.clear();
}

void VTKPolyDataMapperBase::pushToGeometries(Geometry * const value)
{
    editMField(GeometriesFieldMask, _mfGeometries);

    _mfGeometries.push_back(value);
}

void VTKPolyDataMapperBase::assignGeometries(const MFUnrecGeometryPtr &value)
{
    MFUnrecGeometryPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecGeometryPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VTKPolyDataMapper *>(this)->clearGeometries();

    while(elemIt != elemEnd)
    {
        this->pushToGeometries(*elemIt);

        ++elemIt;
    }
}

void VTKPolyDataMapperBase::removeFromGeometries(UInt32 uiIndex)
{
    if(uiIndex < _mfGeometries.size())
    {
        editMField(GeometriesFieldMask, _mfGeometries);

        _mfGeometries.erase(uiIndex);
    }
}

void VTKPolyDataMapperBase::removeObjFromGeometries(Geometry * const value)
{
    Int32 iElemIdx = _mfGeometries.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(GeometriesFieldMask, _mfGeometries);

        _mfGeometries.erase(iElemIdx);
    }
}
void VTKPolyDataMapperBase::clearGeometries(void)
{
    editMField(GeometriesFieldMask, _mfGeometries);


    _mfGeometries.clear();
}

void VTKPolyDataMapperBase::pushToMaterials(ChunkMaterial * const value)
{
    editMField(MaterialsFieldMask, _mfMaterials);

    _mfMaterials.push_back(value);
}

void VTKPolyDataMapperBase::assignMaterials(const MFUnrecChunkMaterialPtr &value)
{
    MFUnrecChunkMaterialPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChunkMaterialPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VTKPolyDataMapper *>(this)->clearMaterials();

    while(elemIt != elemEnd)
    {
        this->pushToMaterials(*elemIt);

        ++elemIt;
    }
}

void VTKPolyDataMapperBase::removeFromMaterials(UInt32 uiIndex)
{
    if(uiIndex < _mfMaterials.size())
    {
        editMField(MaterialsFieldMask, _mfMaterials);

        _mfMaterials.erase(uiIndex);
    }
}

void VTKPolyDataMapperBase::removeObjFromMaterials(ChunkMaterial * const value)
{
    Int32 iElemIdx = _mfMaterials.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(MaterialsFieldMask, _mfMaterials);

        _mfMaterials.erase(iElemIdx);
    }
}
void VTKPolyDataMapperBase::clearMaterials(void)
{
    editMField(MaterialsFieldMask, _mfMaterials);


    _mfMaterials.clear();
}

void VTKPolyDataMapperBase::pushToMaterialChunks(MaterialChunk * const value)
{
    editMField(MaterialChunksFieldMask, _mfMaterialChunks);

    _mfMaterialChunks.push_back(value);
}

void VTKPolyDataMapperBase::assignMaterialChunks(const MFUnrecMaterialChunkPtr &value)
{
    MFUnrecMaterialChunkPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecMaterialChunkPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VTKPolyDataMapper *>(this)->clearMaterialChunks();

    while(elemIt != elemEnd)
    {
        this->pushToMaterialChunks(*elemIt);

        ++elemIt;
    }
}

void VTKPolyDataMapperBase::removeFromMaterialChunks(UInt32 uiIndex)
{
    if(uiIndex < _mfMaterialChunks.size())
    {
        editMField(MaterialChunksFieldMask, _mfMaterialChunks);

        _mfMaterialChunks.erase(uiIndex);
    }
}

void VTKPolyDataMapperBase::removeObjFromMaterialChunks(MaterialChunk * const value)
{
    Int32 iElemIdx = _mfMaterialChunks.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(MaterialChunksFieldMask, _mfMaterialChunks);

        _mfMaterialChunks.erase(iElemIdx);
    }
}
void VTKPolyDataMapperBase::clearMaterialChunks(void)
{
    editMField(MaterialChunksFieldMask, _mfMaterialChunks);


    _mfMaterialChunks.clear();
}

void VTKPolyDataMapperBase::pushToPositions(GeoPnt3fProperty * const value)
{
    editMField(PositionsFieldMask, _mfPositions);

    _mfPositions.push_back(value);
}

void VTKPolyDataMapperBase::assignPositions(const MFUnrecGeoPnt3fPropertyPtr &value)
{
    MFUnrecGeoPnt3fPropertyPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecGeoPnt3fPropertyPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VTKPolyDataMapper *>(this)->clearPositions();

    while(elemIt != elemEnd)
    {
        this->pushToPositions(*elemIt);

        ++elemIt;
    }
}

void VTKPolyDataMapperBase::removeFromPositions(UInt32 uiIndex)
{
    if(uiIndex < _mfPositions.size())
    {
        editMField(PositionsFieldMask, _mfPositions);

        _mfPositions.erase(uiIndex);
    }
}

void VTKPolyDataMapperBase::removeObjFromPositions(GeoPnt3fProperty * const value)
{
    Int32 iElemIdx = _mfPositions.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(PositionsFieldMask, _mfPositions);

        _mfPositions.erase(iElemIdx);
    }
}
void VTKPolyDataMapperBase::clearPositions(void)
{
    editMField(PositionsFieldMask, _mfPositions);


    _mfPositions.clear();
}

void VTKPolyDataMapperBase::pushToLength(GeoUInt32Property * const value)
{
    editMField(LengthFieldMask, _mfLength);

    _mfLength.push_back(value);
}

void VTKPolyDataMapperBase::assignLength   (const MFUnrecGeoUInt32PropertyPtr &value)
{
    MFUnrecGeoUInt32PropertyPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecGeoUInt32PropertyPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VTKPolyDataMapper *>(this)->clearLength();

    while(elemIt != elemEnd)
    {
        this->pushToLength(*elemIt);

        ++elemIt;
    }
}

void VTKPolyDataMapperBase::removeFromLength(UInt32 uiIndex)
{
    if(uiIndex < _mfLength.size())
    {
        editMField(LengthFieldMask, _mfLength);

        _mfLength.erase(uiIndex);
    }
}

void VTKPolyDataMapperBase::removeObjFromLength(GeoUInt32Property * const value)
{
    Int32 iElemIdx = _mfLength.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(LengthFieldMask, _mfLength);

        _mfLength.erase(iElemIdx);
    }
}
void VTKPolyDataMapperBase::clearLength(void)
{
    editMField(LengthFieldMask, _mfLength);


    _mfLength.clear();
}

void VTKPolyDataMapperBase::pushToTypes(GeoUInt8Property * const value)
{
    editMField(TypesFieldMask, _mfTypes);

    _mfTypes.push_back(value);
}

void VTKPolyDataMapperBase::assignTypes    (const MFUnrecGeoUInt8PropertyPtr &value)
{
    MFUnrecGeoUInt8PropertyPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecGeoUInt8PropertyPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VTKPolyDataMapper *>(this)->clearTypes();

    while(elemIt != elemEnd)
    {
        this->pushToTypes(*elemIt);

        ++elemIt;
    }
}

void VTKPolyDataMapperBase::removeFromTypes(UInt32 uiIndex)
{
    if(uiIndex < _mfTypes.size())
    {
        editMField(TypesFieldMask, _mfTypes);

        _mfTypes.erase(uiIndex);
    }
}

void VTKPolyDataMapperBase::removeObjFromTypes(GeoUInt8Property * const value)
{
    Int32 iElemIdx = _mfTypes.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(TypesFieldMask, _mfTypes);

        _mfTypes.erase(iElemIdx);
    }
}
void VTKPolyDataMapperBase::clearTypes(void)
{
    editMField(TypesFieldMask, _mfTypes);


    _mfTypes.clear();
}

void VTKPolyDataMapperBase::pushToColors(GeoColor4fProperty * const value)
{
    editMField(ColorsFieldMask, _mfColors);

    _mfColors.push_back(value);
}

void VTKPolyDataMapperBase::assignColors   (const MFUnrecGeoColor4fPropertyPtr &value)
{
    MFUnrecGeoColor4fPropertyPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecGeoColor4fPropertyPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VTKPolyDataMapper *>(this)->clearColors();

    while(elemIt != elemEnd)
    {
        this->pushToColors(*elemIt);

        ++elemIt;
    }
}

void VTKPolyDataMapperBase::removeFromColors(UInt32 uiIndex)
{
    if(uiIndex < _mfColors.size())
    {
        editMField(ColorsFieldMask, _mfColors);

        _mfColors.erase(uiIndex);
    }
}

void VTKPolyDataMapperBase::removeObjFromColors(GeoColor4fProperty * const value)
{
    Int32 iElemIdx = _mfColors.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ColorsFieldMask, _mfColors);

        _mfColors.erase(iElemIdx);
    }
}
void VTKPolyDataMapperBase::clearColors(void)
{
    editMField(ColorsFieldMask, _mfColors);


    _mfColors.clear();
}

void VTKPolyDataMapperBase::pushToNormals(GeoVec3fProperty * const value)
{
    editMField(NormalsFieldMask, _mfNormals);

    _mfNormals.push_back(value);
}

void VTKPolyDataMapperBase::assignNormals  (const MFUnrecGeoVec3fPropertyPtr &value)
{
    MFUnrecGeoVec3fPropertyPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecGeoVec3fPropertyPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<VTKPolyDataMapper *>(this)->clearNormals();

    while(elemIt != elemEnd)
    {
        this->pushToNormals(*elemIt);

        ++elemIt;
    }
}

void VTKPolyDataMapperBase::removeFromNormals(UInt32 uiIndex)
{
    if(uiIndex < _mfNormals.size())
    {
        editMField(NormalsFieldMask, _mfNormals);

        _mfNormals.erase(uiIndex);
    }
}

void VTKPolyDataMapperBase::removeObjFromNormals(GeoVec3fProperty * const value)
{
    Int32 iElemIdx = _mfNormals.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(NormalsFieldMask, _mfNormals);

        _mfNormals.erase(iElemIdx);
    }
}
void VTKPolyDataMapperBase::clearNormals(void)
{
    editMField(NormalsFieldMask, _mfNormals);


    _mfNormals.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 VTKPolyDataMapperBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        returnValue += _sfRoot.getBinSize();
    }
    if(FieldBits::NoField != (GeoRootsFieldMask & whichField))
    {
        returnValue += _mfGeoRoots.getBinSize();
    }
    if(FieldBits::NoField != (GeometriesFieldMask & whichField))
    {
        returnValue += _mfGeometries.getBinSize();
    }
    if(FieldBits::NoField != (MaterialsFieldMask & whichField))
    {
        returnValue += _mfMaterials.getBinSize();
    }
    if(FieldBits::NoField != (MaterialChunksFieldMask & whichField))
    {
        returnValue += _mfMaterialChunks.getBinSize();
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        returnValue += _mfPositions.getBinSize();
    }
    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        returnValue += _mfLength.getBinSize();
    }
    if(FieldBits::NoField != (TypesFieldMask & whichField))
    {
        returnValue += _mfTypes.getBinSize();
    }
    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        returnValue += _mfColors.getBinSize();
    }
    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        returnValue += _mfNormals.getBinSize();
    }

    return returnValue;
}

void VTKPolyDataMapperBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        _sfRoot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GeoRootsFieldMask & whichField))
    {
        _mfGeoRoots.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GeometriesFieldMask & whichField))
    {
        _mfGeometries.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaterialsFieldMask & whichField))
    {
        _mfMaterials.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaterialChunksFieldMask & whichField))
    {
        _mfMaterialChunks.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _mfPositions.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        _mfLength.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TypesFieldMask & whichField))
    {
        _mfTypes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        _mfColors.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        _mfNormals.copyToBin(pMem);
    }
}

void VTKPolyDataMapperBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        editSField(RootFieldMask);
        _sfRoot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GeoRootsFieldMask & whichField))
    {
        editMField(GeoRootsFieldMask, _mfGeoRoots);
        _mfGeoRoots.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GeometriesFieldMask & whichField))
    {
        editMField(GeometriesFieldMask, _mfGeometries);
        _mfGeometries.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaterialsFieldMask & whichField))
    {
        editMField(MaterialsFieldMask, _mfMaterials);
        _mfMaterials.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaterialChunksFieldMask & whichField))
    {
        editMField(MaterialChunksFieldMask, _mfMaterialChunks);
        _mfMaterialChunks.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        editMField(PositionsFieldMask, _mfPositions);
        _mfPositions.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        editMField(LengthFieldMask, _mfLength);
        _mfLength.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TypesFieldMask & whichField))
    {
        editMField(TypesFieldMask, _mfTypes);
        _mfTypes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        editMField(ColorsFieldMask, _mfColors);
        _mfColors.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        editMField(NormalsFieldMask, _mfNormals);
        _mfNormals.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VTKPolyDataMapperTransitPtr VTKPolyDataMapperBase::createLocal(BitVector bFlags)
{
    VTKPolyDataMapperTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VTKPolyDataMapper>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VTKPolyDataMapperTransitPtr VTKPolyDataMapperBase::createDependent(BitVector bFlags)
{
    VTKPolyDataMapperTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VTKPolyDataMapper>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VTKPolyDataMapperTransitPtr VTKPolyDataMapperBase::create(void)
{
    VTKPolyDataMapperTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<VTKPolyDataMapper>(tmpPtr);
    }

    return fc;
}

VTKPolyDataMapper *VTKPolyDataMapperBase::createEmptyLocal(BitVector bFlags)
{
    VTKPolyDataMapper *returnValue;

    newPtr<VTKPolyDataMapper>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VTKPolyDataMapper *VTKPolyDataMapperBase::createEmpty(void)
{
    VTKPolyDataMapper *returnValue;

    newPtr<VTKPolyDataMapper>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr VTKPolyDataMapperBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VTKPolyDataMapper *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VTKPolyDataMapper *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VTKPolyDataMapperBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VTKPolyDataMapper *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VTKPolyDataMapper *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VTKPolyDataMapperBase::shallowCopy(void) const
{
    VTKPolyDataMapper *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const VTKPolyDataMapper *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

VTKPolyDataMapperBase::VTKPolyDataMapperBase(void) :
    Inherited(),
    _sfRoot                   (NULL),
    _mfGeoRoots               (),
    _mfGeometries             (),
    _mfMaterials              (),
    _mfMaterialChunks         (),
    _mfPositions              (),
    _mfLength                 (),
    _mfTypes                  (),
    _mfColors                 (),
    _mfNormals                ()
{
}

VTKPolyDataMapperBase::VTKPolyDataMapperBase(const VTKPolyDataMapperBase &source) :
    Inherited(source),
    _sfRoot                   (NULL),
    _mfGeoRoots               (),
    _mfGeometries             (),
    _mfMaterials              (),
    _mfMaterialChunks         (),
    _mfPositions              (),
    _mfLength                 (),
    _mfTypes                  (),
    _mfColors                 (),
    _mfNormals                ()
{
}


/*-------------------------- destructors ----------------------------------*/

VTKPolyDataMapperBase::~VTKPolyDataMapperBase(void)
{
}

void VTKPolyDataMapperBase::onCreate(const VTKPolyDataMapper *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        VTKPolyDataMapper *pThis = static_cast<VTKPolyDataMapper *>(this);

        pThis->setRoot(source->getRoot());

        MFUnrecNodePtr::const_iterator GeoRootsIt  =
            source->_mfGeoRoots.begin();
        MFUnrecNodePtr::const_iterator GeoRootsEnd =
            source->_mfGeoRoots.end  ();

        while(GeoRootsIt != GeoRootsEnd)
        {
            pThis->pushToGeoRoots(*GeoRootsIt);

            ++GeoRootsIt;
        }

        MFUnrecGeometryPtr::const_iterator GeometriesIt  =
            source->_mfGeometries.begin();
        MFUnrecGeometryPtr::const_iterator GeometriesEnd =
            source->_mfGeometries.end  ();

        while(GeometriesIt != GeometriesEnd)
        {
            pThis->pushToGeometries(*GeometriesIt);

            ++GeometriesIt;
        }

        MFUnrecChunkMaterialPtr::const_iterator MaterialsIt  =
            source->_mfMaterials.begin();
        MFUnrecChunkMaterialPtr::const_iterator MaterialsEnd =
            source->_mfMaterials.end  ();

        while(MaterialsIt != MaterialsEnd)
        {
            pThis->pushToMaterials(*MaterialsIt);

            ++MaterialsIt;
        }

        MFUnrecMaterialChunkPtr::const_iterator MaterialChunksIt  =
            source->_mfMaterialChunks.begin();
        MFUnrecMaterialChunkPtr::const_iterator MaterialChunksEnd =
            source->_mfMaterialChunks.end  ();

        while(MaterialChunksIt != MaterialChunksEnd)
        {
            pThis->pushToMaterialChunks(*MaterialChunksIt);

            ++MaterialChunksIt;
        }

        MFUnrecGeoPnt3fPropertyPtr::const_iterator PositionsIt  =
            source->_mfPositions.begin();
        MFUnrecGeoPnt3fPropertyPtr::const_iterator PositionsEnd =
            source->_mfPositions.end  ();

        while(PositionsIt != PositionsEnd)
        {
            pThis->pushToPositions(*PositionsIt);

            ++PositionsIt;
        }

        MFUnrecGeoUInt32PropertyPtr::const_iterator LengthIt  =
            source->_mfLength.begin();
        MFUnrecGeoUInt32PropertyPtr::const_iterator LengthEnd =
            source->_mfLength.end  ();

        while(LengthIt != LengthEnd)
        {
            pThis->pushToLength(*LengthIt);

            ++LengthIt;
        }

        MFUnrecGeoUInt8PropertyPtr::const_iterator TypesIt  =
            source->_mfTypes.begin();
        MFUnrecGeoUInt8PropertyPtr::const_iterator TypesEnd =
            source->_mfTypes.end  ();

        while(TypesIt != TypesEnd)
        {
            pThis->pushToTypes(*TypesIt);

            ++TypesIt;
        }

        MFUnrecGeoColor4fPropertyPtr::const_iterator ColorsIt  =
            source->_mfColors.begin();
        MFUnrecGeoColor4fPropertyPtr::const_iterator ColorsEnd =
            source->_mfColors.end  ();

        while(ColorsIt != ColorsEnd)
        {
            pThis->pushToColors(*ColorsIt);

            ++ColorsIt;
        }

        MFUnrecGeoVec3fPropertyPtr::const_iterator NormalsIt  =
            source->_mfNormals.begin();
        MFUnrecGeoVec3fPropertyPtr::const_iterator NormalsEnd =
            source->_mfNormals.end  ();

        while(NormalsIt != NormalsEnd)
        {
            pThis->pushToNormals(*NormalsIt);

            ++NormalsIt;
        }
    }
}

GetFieldHandlePtr VTKPolyDataMapperBase::getHandleRoot            (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfRoot,
             this->getType().getFieldDesc(RootFieldId),
             const_cast<VTKPolyDataMapperBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VTKPolyDataMapperBase::editHandleRoot           (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfRoot,
             this->getType().getFieldDesc(RootFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&VTKPolyDataMapper::setRoot,
                    static_cast<VTKPolyDataMapper *>(this), _1));

    editSField(RootFieldMask);

    return returnValue;
}

GetFieldHandlePtr VTKPolyDataMapperBase::getHandleGeoRoots        (void) const
{
    MFUnrecNodePtr::GetHandlePtr returnValue(
        new  MFUnrecNodePtr::GetHandle(
             &_mfGeoRoots,
             this->getType().getFieldDesc(GeoRootsFieldId),
             const_cast<VTKPolyDataMapperBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VTKPolyDataMapperBase::editHandleGeoRoots       (void)
{
    MFUnrecNodePtr::EditHandlePtr returnValue(
        new  MFUnrecNodePtr::EditHandle(
             &_mfGeoRoots,
             this->getType().getFieldDesc(GeoRootsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VTKPolyDataMapper::pushToGeoRoots,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VTKPolyDataMapper::removeFromGeoRoots,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VTKPolyDataMapper::removeObjFromGeoRoots,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VTKPolyDataMapper::clearGeoRoots,
                    static_cast<VTKPolyDataMapper *>(this)));

    editMField(GeoRootsFieldMask, _mfGeoRoots);

    return returnValue;
}

GetFieldHandlePtr VTKPolyDataMapperBase::getHandleGeometries      (void) const
{
    MFUnrecGeometryPtr::GetHandlePtr returnValue(
        new  MFUnrecGeometryPtr::GetHandle(
             &_mfGeometries,
             this->getType().getFieldDesc(GeometriesFieldId),
             const_cast<VTKPolyDataMapperBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VTKPolyDataMapperBase::editHandleGeometries     (void)
{
    MFUnrecGeometryPtr::EditHandlePtr returnValue(
        new  MFUnrecGeometryPtr::EditHandle(
             &_mfGeometries,
             this->getType().getFieldDesc(GeometriesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VTKPolyDataMapper::pushToGeometries,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VTKPolyDataMapper::removeFromGeometries,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VTKPolyDataMapper::removeObjFromGeometries,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VTKPolyDataMapper::clearGeometries,
                    static_cast<VTKPolyDataMapper *>(this)));

    editMField(GeometriesFieldMask, _mfGeometries);

    return returnValue;
}

GetFieldHandlePtr VTKPolyDataMapperBase::getHandleMaterials       (void) const
{
    MFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  MFUnrecChunkMaterialPtr::GetHandle(
             &_mfMaterials,
             this->getType().getFieldDesc(MaterialsFieldId),
             const_cast<VTKPolyDataMapperBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VTKPolyDataMapperBase::editHandleMaterials      (void)
{
    MFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  MFUnrecChunkMaterialPtr::EditHandle(
             &_mfMaterials,
             this->getType().getFieldDesc(MaterialsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VTKPolyDataMapper::pushToMaterials,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VTKPolyDataMapper::removeFromMaterials,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VTKPolyDataMapper::removeObjFromMaterials,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VTKPolyDataMapper::clearMaterials,
                    static_cast<VTKPolyDataMapper *>(this)));

    editMField(MaterialsFieldMask, _mfMaterials);

    return returnValue;
}

GetFieldHandlePtr VTKPolyDataMapperBase::getHandleMaterialChunks  (void) const
{
    MFUnrecMaterialChunkPtr::GetHandlePtr returnValue(
        new  MFUnrecMaterialChunkPtr::GetHandle(
             &_mfMaterialChunks,
             this->getType().getFieldDesc(MaterialChunksFieldId),
             const_cast<VTKPolyDataMapperBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VTKPolyDataMapperBase::editHandleMaterialChunks (void)
{
    MFUnrecMaterialChunkPtr::EditHandlePtr returnValue(
        new  MFUnrecMaterialChunkPtr::EditHandle(
             &_mfMaterialChunks,
             this->getType().getFieldDesc(MaterialChunksFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VTKPolyDataMapper::pushToMaterialChunks,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VTKPolyDataMapper::removeFromMaterialChunks,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VTKPolyDataMapper::removeObjFromMaterialChunks,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VTKPolyDataMapper::clearMaterialChunks,
                    static_cast<VTKPolyDataMapper *>(this)));

    editMField(MaterialChunksFieldMask, _mfMaterialChunks);

    return returnValue;
}

GetFieldHandlePtr VTKPolyDataMapperBase::getHandlePositions       (void) const
{
    MFUnrecGeoPnt3fPropertyPtr::GetHandlePtr returnValue(
        new  MFUnrecGeoPnt3fPropertyPtr::GetHandle(
             &_mfPositions,
             this->getType().getFieldDesc(PositionsFieldId),
             const_cast<VTKPolyDataMapperBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VTKPolyDataMapperBase::editHandlePositions      (void)
{
    MFUnrecGeoPnt3fPropertyPtr::EditHandlePtr returnValue(
        new  MFUnrecGeoPnt3fPropertyPtr::EditHandle(
             &_mfPositions,
             this->getType().getFieldDesc(PositionsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VTKPolyDataMapper::pushToPositions,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VTKPolyDataMapper::removeFromPositions,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VTKPolyDataMapper::removeObjFromPositions,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VTKPolyDataMapper::clearPositions,
                    static_cast<VTKPolyDataMapper *>(this)));

    editMField(PositionsFieldMask, _mfPositions);

    return returnValue;
}

GetFieldHandlePtr VTKPolyDataMapperBase::getHandleLength          (void) const
{
    MFUnrecGeoUInt32PropertyPtr::GetHandlePtr returnValue(
        new  MFUnrecGeoUInt32PropertyPtr::GetHandle(
             &_mfLength,
             this->getType().getFieldDesc(LengthFieldId),
             const_cast<VTKPolyDataMapperBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VTKPolyDataMapperBase::editHandleLength         (void)
{
    MFUnrecGeoUInt32PropertyPtr::EditHandlePtr returnValue(
        new  MFUnrecGeoUInt32PropertyPtr::EditHandle(
             &_mfLength,
             this->getType().getFieldDesc(LengthFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VTKPolyDataMapper::pushToLength,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VTKPolyDataMapper::removeFromLength,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VTKPolyDataMapper::removeObjFromLength,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VTKPolyDataMapper::clearLength,
                    static_cast<VTKPolyDataMapper *>(this)));

    editMField(LengthFieldMask, _mfLength);

    return returnValue;
}

GetFieldHandlePtr VTKPolyDataMapperBase::getHandleTypes           (void) const
{
    MFUnrecGeoUInt8PropertyPtr::GetHandlePtr returnValue(
        new  MFUnrecGeoUInt8PropertyPtr::GetHandle(
             &_mfTypes,
             this->getType().getFieldDesc(TypesFieldId),
             const_cast<VTKPolyDataMapperBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VTKPolyDataMapperBase::editHandleTypes          (void)
{
    MFUnrecGeoUInt8PropertyPtr::EditHandlePtr returnValue(
        new  MFUnrecGeoUInt8PropertyPtr::EditHandle(
             &_mfTypes,
             this->getType().getFieldDesc(TypesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VTKPolyDataMapper::pushToTypes,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VTKPolyDataMapper::removeFromTypes,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VTKPolyDataMapper::removeObjFromTypes,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VTKPolyDataMapper::clearTypes,
                    static_cast<VTKPolyDataMapper *>(this)));

    editMField(TypesFieldMask, _mfTypes);

    return returnValue;
}

GetFieldHandlePtr VTKPolyDataMapperBase::getHandleColors          (void) const
{
    MFUnrecGeoColor4fPropertyPtr::GetHandlePtr returnValue(
        new  MFUnrecGeoColor4fPropertyPtr::GetHandle(
             &_mfColors,
             this->getType().getFieldDesc(ColorsFieldId),
             const_cast<VTKPolyDataMapperBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VTKPolyDataMapperBase::editHandleColors         (void)
{
    MFUnrecGeoColor4fPropertyPtr::EditHandlePtr returnValue(
        new  MFUnrecGeoColor4fPropertyPtr::EditHandle(
             &_mfColors,
             this->getType().getFieldDesc(ColorsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VTKPolyDataMapper::pushToColors,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VTKPolyDataMapper::removeFromColors,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VTKPolyDataMapper::removeObjFromColors,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VTKPolyDataMapper::clearColors,
                    static_cast<VTKPolyDataMapper *>(this)));

    editMField(ColorsFieldMask, _mfColors);

    return returnValue;
}

GetFieldHandlePtr VTKPolyDataMapperBase::getHandleNormals         (void) const
{
    MFUnrecGeoVec3fPropertyPtr::GetHandlePtr returnValue(
        new  MFUnrecGeoVec3fPropertyPtr::GetHandle(
             &_mfNormals,
             this->getType().getFieldDesc(NormalsFieldId),
             const_cast<VTKPolyDataMapperBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VTKPolyDataMapperBase::editHandleNormals        (void)
{
    MFUnrecGeoVec3fPropertyPtr::EditHandlePtr returnValue(
        new  MFUnrecGeoVec3fPropertyPtr::EditHandle(
             &_mfNormals,
             this->getType().getFieldDesc(NormalsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&VTKPolyDataMapper::pushToNormals,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&VTKPolyDataMapper::removeFromNormals,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&VTKPolyDataMapper::removeObjFromNormals,
                    static_cast<VTKPolyDataMapper *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&VTKPolyDataMapper::clearNormals,
                    static_cast<VTKPolyDataMapper *>(this)));

    editMField(NormalsFieldMask, _mfNormals);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VTKPolyDataMapperBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VTKPolyDataMapper *pThis = static_cast<VTKPolyDataMapper *>(this);

    pThis->execSync(static_cast<VTKPolyDataMapper *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VTKPolyDataMapperBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VTKPolyDataMapper *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VTKPolyDataMapper *>(pRefAspect),
                  dynamic_cast<const VTKPolyDataMapper *>(this));

    return returnValue;
}
#endif

void VTKPolyDataMapperBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<VTKPolyDataMapper *>(this)->setRoot(NULL);

    static_cast<VTKPolyDataMapper *>(this)->clearGeoRoots();

    static_cast<VTKPolyDataMapper *>(this)->clearGeometries();

    static_cast<VTKPolyDataMapper *>(this)->clearMaterials();

    static_cast<VTKPolyDataMapper *>(this)->clearMaterialChunks();

    static_cast<VTKPolyDataMapper *>(this)->clearPositions();

    static_cast<VTKPolyDataMapper *>(this)->clearLength();

    static_cast<VTKPolyDataMapper *>(this)->clearTypes();

    static_cast<VTKPolyDataMapper *>(this)->clearColors();

    static_cast<VTKPolyDataMapper *>(this)->clearNormals();


}


OSG_END_NAMESPACE
