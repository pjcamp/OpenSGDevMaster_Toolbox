/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Manipulator
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGMANIPULATORBASE_H_
#define _OSGMANIPULATORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribGUIDef.h"

//#include "OSGBaseTypes.h"

#include "OSGTransform.h" // Parent

#include "OSGNodeFields.h"              // Target type
#include "OSGSysFields.h"               // ActiveHandle type
#include "OSGVecFields.h"               // StartMousePos type
#include "OSGViewportFields.h"          // Viewport type
#include "OSGGeometryFields.h"          // XGeometries type
#include "OSGMaterialFields.h"          // MaterialX type

#include "OSGManipulatorFields.h"

OSG_BEGIN_NAMESPACE

class Manipulator;

//! \brief Manipulator Base Class.

class OSG_CONTRIBGUI_DLLMAPPING ManipulatorBase : public Transform
{
  public:

    typedef Transform Inherited;
    typedef Transform ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(Manipulator);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TargetFieldId = Inherited::NextFieldId,
        ActiveHandleFieldId = TargetFieldId + 1,
        RolloverHandleFieldId = ActiveHandleFieldId + 1,
        StartMousePosFieldId = RolloverHandleFieldId + 1,
        ViewportFieldId = StartMousePosFieldId + 1,
        MaintainScreenSizeFieldId = ViewportFieldId + 1,
        ManipulatorScreenDepthFieldId = MaintainScreenSizeFieldId + 1,
        LengthFieldId = ManipulatorScreenDepthFieldId + 1,
        WidthFieldId = LengthFieldId + 1,
        XGeometriesFieldId = WidthFieldId + 1,
        YGeometriesFieldId = XGeometriesFieldId + 1,
        ZGeometriesFieldId = YGeometriesFieldId + 1,
        MaterialXFieldId = ZGeometriesFieldId + 1,
        MaterialYFieldId = MaterialXFieldId + 1,
        MaterialZFieldId = MaterialYFieldId + 1,
        MaterialSelectedFieldId = MaterialZFieldId + 1,
        MaterialRolloverFieldId = MaterialSelectedFieldId + 1,
        NextFieldId = MaterialRolloverFieldId + 1
    };

    static const OSG::BitVector TargetFieldMask =
        (TypeTraits<BitVector>::One << TargetFieldId);
    static const OSG::BitVector ActiveHandleFieldMask =
        (TypeTraits<BitVector>::One << ActiveHandleFieldId);
    static const OSG::BitVector RolloverHandleFieldMask =
        (TypeTraits<BitVector>::One << RolloverHandleFieldId);
    static const OSG::BitVector StartMousePosFieldMask =
        (TypeTraits<BitVector>::One << StartMousePosFieldId);
    static const OSG::BitVector ViewportFieldMask =
        (TypeTraits<BitVector>::One << ViewportFieldId);
    static const OSG::BitVector MaintainScreenSizeFieldMask =
        (TypeTraits<BitVector>::One << MaintainScreenSizeFieldId);
    static const OSG::BitVector ManipulatorScreenDepthFieldMask =
        (TypeTraits<BitVector>::One << ManipulatorScreenDepthFieldId);
    static const OSG::BitVector LengthFieldMask =
        (TypeTraits<BitVector>::One << LengthFieldId);
    static const OSG::BitVector WidthFieldMask =
        (TypeTraits<BitVector>::One << WidthFieldId);
    static const OSG::BitVector XGeometriesFieldMask =
        (TypeTraits<BitVector>::One << XGeometriesFieldId);
    static const OSG::BitVector YGeometriesFieldMask =
        (TypeTraits<BitVector>::One << YGeometriesFieldId);
    static const OSG::BitVector ZGeometriesFieldMask =
        (TypeTraits<BitVector>::One << ZGeometriesFieldId);
    static const OSG::BitVector MaterialXFieldMask =
        (TypeTraits<BitVector>::One << MaterialXFieldId);
    static const OSG::BitVector MaterialYFieldMask =
        (TypeTraits<BitVector>::One << MaterialYFieldId);
    static const OSG::BitVector MaterialZFieldMask =
        (TypeTraits<BitVector>::One << MaterialZFieldId);
    static const OSG::BitVector MaterialSelectedFieldMask =
        (TypeTraits<BitVector>::One << MaterialSelectedFieldId);
    static const OSG::BitVector MaterialRolloverFieldMask =
        (TypeTraits<BitVector>::One << MaterialRolloverFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecNodePtr    SFTargetType;
    typedef SFUInt16          SFActiveHandleType;
    typedef SFUInt16          SFRolloverHandleType;
    typedef SFPnt2f           SFStartMousePosType;
    typedef SFUnrecViewportPtr SFViewportType;
    typedef SFBool            SFMaintainScreenSizeType;
    typedef SFReal32          SFManipulatorScreenDepthType;
    typedef SFVec3f           SFLengthType;
    typedef SFVec3f           SFWidthType;
    typedef MFUnrecGeometryPtr MFXGeometriesType;
    typedef MFUnrecGeometryPtr MFYGeometriesType;
    typedef MFUnrecGeometryPtr MFZGeometriesType;
    typedef SFUnrecMaterialPtr SFMaterialXType;
    typedef SFUnrecMaterialPtr SFMaterialYType;
    typedef SFUnrecMaterialPtr SFMaterialZType;
    typedef SFUnrecMaterialPtr SFMaterialSelectedType;
    typedef SFUnrecMaterialPtr SFMaterialRolloverType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecNodePtr      *getSFTarget         (void) const;
                  SFUnrecNodePtr      *editSFTarget         (void);

                  SFUInt16            *editSFActiveHandle   (void);
            const SFUInt16            *getSFActiveHandle    (void) const;

                  SFUInt16            *editSFRolloverHandle (void);
            const SFUInt16            *getSFRolloverHandle  (void) const;
            const SFUnrecViewportPtr  *getSFViewport       (void) const;
                  SFUnrecViewportPtr  *editSFViewport       (void);

                  SFBool              *editSFMaintainScreenSize(void);
            const SFBool              *getSFMaintainScreenSize (void) const;

                  SFReal32            *editSFManipulatorScreenDepth(void);
            const SFReal32            *getSFManipulatorScreenDepth (void) const;

                  SFVec3f             *editSFLength         (void);
            const SFVec3f             *getSFLength          (void) const;

                  SFVec3f             *editSFWidth          (void);
            const SFVec3f             *getSFWidth           (void) const;
            const SFUnrecMaterialPtr  *getSFMaterialX      (void) const;
                  SFUnrecMaterialPtr  *editSFMaterialX      (void);
            const SFUnrecMaterialPtr  *getSFMaterialY      (void) const;
                  SFUnrecMaterialPtr  *editSFMaterialY      (void);
            const SFUnrecMaterialPtr  *getSFMaterialZ      (void) const;
                  SFUnrecMaterialPtr  *editSFMaterialZ      (void);
            const SFUnrecMaterialPtr  *getSFMaterialSelected(void) const;
                  SFUnrecMaterialPtr  *editSFMaterialSelected(void);
            const SFUnrecMaterialPtr  *getSFMaterialRollover(void) const;
                  SFUnrecMaterialPtr  *editSFMaterialRollover(void);


                  Node * getTarget         (void) const;

                  UInt16              &editActiveHandle   (void);
                  UInt16               getActiveHandle    (void) const;

                  UInt16              &editRolloverHandle (void);
                  UInt16               getRolloverHandle  (void) const;

                  Viewport * getViewport       (void) const;

                  bool                &editMaintainScreenSize(void);
                  bool                 getMaintainScreenSize (void) const;

                  Real32              &editManipulatorScreenDepth(void);
                  Real32               getManipulatorScreenDepth (void) const;

                  Vec3f               &editLength         (void);
            const Vec3f               &getLength          (void) const;

                  Vec3f               &editWidth          (void);
            const Vec3f               &getWidth           (void) const;

                  Material * getMaterialX      (void) const;

                  Material * getMaterialY      (void) const;

                  Material * getMaterialZ      (void) const;

                  Material * getMaterialSelected(void) const;

                  Material * getMaterialRollover(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTarget         (Node * const value);
            void setActiveHandle   (const UInt16 value);
            void setRolloverHandle (const UInt16 value);
            void setViewport       (Viewport * const value);
            void setMaintainScreenSize(const bool value);
            void setManipulatorScreenDepth(const Real32 value);
            void setLength         (const Vec3f &value);
            void setWidth          (const Vec3f &value);
            void setMaterialX      (Material * const value);
            void setMaterialY      (Material * const value);
            void setMaterialZ      (Material * const value);
            void setMaterialSelected(Material * const value);
            void setMaterialRollover(Material * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecNodePtr    _sfTarget;
    SFUInt16          _sfActiveHandle;
    SFUInt16          _sfRolloverHandle;
    SFPnt2f           _sfStartMousePos;
    SFUnrecViewportPtr _sfViewport;
    SFBool            _sfMaintainScreenSize;
    SFReal32          _sfManipulatorScreenDepth;
    SFVec3f           _sfLength;
    SFVec3f           _sfWidth;
    MFUnrecGeometryPtr _mfXGeometries;
    MFUnrecGeometryPtr _mfYGeometries;
    MFUnrecGeometryPtr _mfZGeometries;
    SFUnrecMaterialPtr _sfMaterialX;
    SFUnrecMaterialPtr _sfMaterialY;
    SFUnrecMaterialPtr _sfMaterialZ;
    SFUnrecMaterialPtr _sfMaterialSelected;
    SFUnrecMaterialPtr _sfMaterialRollover;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ManipulatorBase(void);
    ManipulatorBase(const ManipulatorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ManipulatorBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const Manipulator *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleTarget          (void) const;
    EditFieldHandlePtr editHandleTarget         (void);
    GetFieldHandlePtr  getHandleActiveHandle    (void) const;
    EditFieldHandlePtr editHandleActiveHandle   (void);
    GetFieldHandlePtr  getHandleRolloverHandle  (void) const;
    EditFieldHandlePtr editHandleRolloverHandle (void);
    GetFieldHandlePtr  getHandleStartMousePos   (void) const;
    EditFieldHandlePtr editHandleStartMousePos  (void);
    GetFieldHandlePtr  getHandleViewport        (void) const;
    EditFieldHandlePtr editHandleViewport       (void);
    GetFieldHandlePtr  getHandleMaintainScreenSize (void) const;
    EditFieldHandlePtr editHandleMaintainScreenSize(void);
    GetFieldHandlePtr  getHandleManipulatorScreenDepth (void) const;
    EditFieldHandlePtr editHandleManipulatorScreenDepth(void);
    GetFieldHandlePtr  getHandleLength          (void) const;
    EditFieldHandlePtr editHandleLength         (void);
    GetFieldHandlePtr  getHandleWidth           (void) const;
    EditFieldHandlePtr editHandleWidth          (void);
    GetFieldHandlePtr  getHandleXGeometries     (void) const;
    EditFieldHandlePtr editHandleXGeometries    (void);
    GetFieldHandlePtr  getHandleYGeometries     (void) const;
    EditFieldHandlePtr editHandleYGeometries    (void);
    GetFieldHandlePtr  getHandleZGeometries     (void) const;
    EditFieldHandlePtr editHandleZGeometries    (void);
    GetFieldHandlePtr  getHandleMaterialX       (void) const;
    EditFieldHandlePtr editHandleMaterialX      (void);
    GetFieldHandlePtr  getHandleMaterialY       (void) const;
    EditFieldHandlePtr editHandleMaterialY      (void);
    GetFieldHandlePtr  getHandleMaterialZ       (void) const;
    EditFieldHandlePtr editHandleMaterialZ      (void);
    GetFieldHandlePtr  getHandleMaterialSelected (void) const;
    EditFieldHandlePtr editHandleMaterialSelected(void);
    GetFieldHandlePtr  getHandleMaterialRollover (void) const;
    EditFieldHandlePtr editHandleMaterialRollover(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFPnt2f             *editSFStartMousePos  (void);
            const SFPnt2f             *getSFStartMousePos   (void) const;
            const MFUnrecGeometryPtr  *getMFXGeometries     (void) const;
                  MFUnrecGeometryPtr  *editMFXGeometries    (void);
            const MFUnrecGeometryPtr  *getMFYGeometries     (void) const;
                  MFUnrecGeometryPtr  *editMFYGeometries    (void);
            const MFUnrecGeometryPtr  *getMFZGeometries     (void) const;
                  MFUnrecGeometryPtr  *editMFZGeometries    (void);


                  Pnt2f               &editStartMousePos  (void);
            const Pnt2f               &getStartMousePos   (void) const;

                  Geometry * getXGeometries    (const UInt32 index) const;

                  Geometry * getYGeometries    (const UInt32 index) const;

                  Geometry * getZGeometries    (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setStartMousePos  (const Pnt2f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToXGeometries           (Geometry * const value   );
    void assignXGeometries           (const MFUnrecGeometryPtr &value);
    void removeFromXGeometries (UInt32                uiIndex );
    void removeObjFromXGeometries(Geometry * const value   );
    void clearXGeometries            (void                          );

    void pushToYGeometries           (Geometry * const value   );
    void assignYGeometries           (const MFUnrecGeometryPtr &value);
    void removeFromYGeometries (UInt32                uiIndex );
    void removeObjFromYGeometries(Geometry * const value   );
    void clearYGeometries            (void                          );

    void pushToZGeometries           (Geometry * const value   );
    void assignZGeometries           (const MFUnrecGeometryPtr &value);
    void removeFromZGeometries (UInt32                uiIndex );
    void removeObjFromZGeometries(Geometry * const value   );
    void clearZGeometries            (void                          );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ManipulatorBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ManipulatorBase &source);
};

typedef ManipulatorBase *ManipulatorBaseP;

OSG_END_NAMESPACE

#endif /* _OSGMANIPULATORBASE_H_ */
