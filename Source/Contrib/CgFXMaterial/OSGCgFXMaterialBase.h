/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CgFXMaterial
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCGFXMATERIALBASE_H_
#define _OSGCGFXMATERIALBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribCgFXDef.h"

//#include "OSGBaseTypes.h"

#include "OSGVariantMaterial.h" // Parent

#include "OSGSysFields.h"               // TreatTechniquesAsVariants type
#include "OSGBaseFields.h"              // EffectFile type
#include "OSGShaderProgramVariablesFields.h" // Variables type
#include "OSGCgFXTechniqueFields.h"     // Techniques type
#include "OSGTextureObjChunkFields.h"   // Textures type

#include "OSGCgFXMaterialFields.h"

OSG_BEGIN_NAMESPACE

class CgFXMaterial;

//! \brief CgFXMaterial Base Class.

class OSG_CONTRIBCGFX_DLLMAPPING CgFXMaterialBase : public VariantMaterial
{
  public:

    typedef VariantMaterial Inherited;
    typedef VariantMaterial ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(CgFXMaterial);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TreatTechniquesAsVariantsFieldId = Inherited::NextFieldId,
        ParameterValueSourceFieldId = TreatTechniquesAsVariantsFieldId + 1,
        EffectFileFieldId = ParameterValueSourceFieldId + 1,
        EffectStringFieldId = EffectFileFieldId + 1,
        CompilerOptionsFieldId = EffectStringFieldId + 1,
        VariablesFieldId = CompilerOptionsFieldId + 1,
        SelectedTechniqueFieldId = VariablesFieldId + 1,
        StateVariablesFieldId = SelectedTechniqueFieldId + 1,
        TechniquesFieldId = StateVariablesFieldId + 1,
        TexturesFieldId = TechniquesFieldId + 1,
        GLIdFieldId = TexturesFieldId + 1,
        NextFieldId = GLIdFieldId + 1
    };

    static const OSG::BitVector TreatTechniquesAsVariantsFieldMask =
        (TypeTraits<BitVector>::One << TreatTechniquesAsVariantsFieldId);
    static const OSG::BitVector ParameterValueSourceFieldMask =
        (TypeTraits<BitVector>::One << ParameterValueSourceFieldId);
    static const OSG::BitVector EffectFileFieldMask =
        (TypeTraits<BitVector>::One << EffectFileFieldId);
    static const OSG::BitVector EffectStringFieldMask =
        (TypeTraits<BitVector>::One << EffectStringFieldId);
    static const OSG::BitVector CompilerOptionsFieldMask =
        (TypeTraits<BitVector>::One << CompilerOptionsFieldId);
    static const OSG::BitVector VariablesFieldMask =
        (TypeTraits<BitVector>::One << VariablesFieldId);
    static const OSG::BitVector SelectedTechniqueFieldMask =
        (TypeTraits<BitVector>::One << SelectedTechniqueFieldId);
    static const OSG::BitVector StateVariablesFieldMask =
        (TypeTraits<BitVector>::One << StateVariablesFieldId);
    static const OSG::BitVector TechniquesFieldMask =
        (TypeTraits<BitVector>::One << TechniquesFieldId);
    static const OSG::BitVector TexturesFieldMask =
        (TypeTraits<BitVector>::One << TexturesFieldId);
    static const OSG::BitVector GLIdFieldMask =
        (TypeTraits<BitVector>::One << GLIdFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFBool            SFTreatTechniquesAsVariantsType;
    typedef SFUInt8           SFParameterValueSourceType;
    typedef SFString          SFEffectFileType;
    typedef SFString          SFEffectStringType;
    typedef MFString          MFCompilerOptionsType;
    typedef SFUnrecChildShaderProgramVariablesPtr SFVariablesType;
    typedef SFString          SFSelectedTechniqueType;
    typedef SFUInt32          SFStateVariablesType;
    typedef MFUnrecCgFXTechniquePtr MFTechniquesType;
    typedef MFUnrecTextureObjChunkPtr MFTexturesType;
    typedef SFGLenum          SFGLIdType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFBool              *editSFTreatTechniquesAsVariants(void);
            const SFBool              *getSFTreatTechniquesAsVariants (void) const;

                  SFUInt8             *editSFParameterValueSource(void);
            const SFUInt8             *getSFParameterValueSource (void) const;

                  SFString            *editSFEffectFile     (void);
            const SFString            *getSFEffectFile      (void) const;

                  SFString            *editSFEffectString   (void);
            const SFString            *getSFEffectString    (void) const;

                  MFString            *editMFCompilerOptions(void);
            const MFString            *getMFCompilerOptions (void) const;

                  SFGLenum            *editSFGLId           (void);
            const SFGLenum            *getSFGLId            (void) const;


                  bool                &editTreatTechniquesAsVariants(void);
                  bool                 getTreatTechniquesAsVariants (void) const;

                  UInt8               &editParameterValueSource(void);
                  UInt8                getParameterValueSource (void) const;

                  std::string         &editEffectFile     (void);
            const std::string         &getEffectFile      (void) const;

                  std::string         &editEffectString   (void);
            const std::string         &getEffectString    (void) const;

                  std::string         &editCompilerOptions(const UInt32 index);
            const std::string         &getCompilerOptions (const UInt32 index) const;

                  GLenum              &editGLId           (void);
            const GLenum              &getGLId            (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTreatTechniquesAsVariants(const bool value);
            void setParameterValueSource(const UInt8 value);
            void setEffectFile     (const std::string &value);
            void setEffectString   (const std::string &value);
            void setGLId           (const GLenum &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  CgFXMaterialTransitPtr  create          (void);
    static  CgFXMaterial           *createEmpty     (void);

    static  CgFXMaterialTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  CgFXMaterial            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  CgFXMaterialTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFBool            _sfTreatTechniquesAsVariants;
    SFUInt8           _sfParameterValueSource;
    SFString          _sfEffectFile;
    SFString          _sfEffectString;
    MFString          _mfCompilerOptions;
    SFUnrecChildShaderProgramVariablesPtr _sfVariables;
    SFString          _sfSelectedTechnique;
    SFUInt32          _sfStateVariables;
    MFUnrecCgFXTechniquePtr _mfTechniques;
    MFUnrecTextureObjChunkPtr _mfTextures;
    SFGLenum          _sfGLId;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    CgFXMaterialBase(void);
    CgFXMaterialBase(const CgFXMaterialBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~CgFXMaterialBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const CgFXMaterial *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Child linking                                                */
    /*! \{                                                                 */

    virtual bool unlinkChild(FieldContainer * const pChild,
                             UInt16           const childFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleTreatTechniquesAsVariants (void) const;
    EditFieldHandlePtr editHandleTreatTechniquesAsVariants(void);
    GetFieldHandlePtr  getHandleParameterValueSource (void) const;
    EditFieldHandlePtr editHandleParameterValueSource(void);
    GetFieldHandlePtr  getHandleEffectFile      (void) const;
    EditFieldHandlePtr editHandleEffectFile     (void);
    GetFieldHandlePtr  getHandleEffectString    (void) const;
    EditFieldHandlePtr editHandleEffectString   (void);
    GetFieldHandlePtr  getHandleCompilerOptions (void) const;
    EditFieldHandlePtr editHandleCompilerOptions(void);
    GetFieldHandlePtr  getHandleVariables       (void) const;
    EditFieldHandlePtr editHandleVariables      (void);
    GetFieldHandlePtr  getHandleSelectedTechnique (void) const;
    EditFieldHandlePtr editHandleSelectedTechnique(void);
    GetFieldHandlePtr  getHandleStateVariables  (void) const;
    EditFieldHandlePtr editHandleStateVariables (void);
    GetFieldHandlePtr  getHandleTechniques      (void) const;
    EditFieldHandlePtr editHandleTechniques     (void);
    GetFieldHandlePtr  getHandleTextures        (void) const;
    EditFieldHandlePtr editHandleTextures       (void);
    GetFieldHandlePtr  getHandleGLId            (void) const;
    EditFieldHandlePtr editHandleGLId           (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecChildShaderProgramVariablesPtr *getSFVariables       (void) const;
                  SFUnrecChildShaderProgramVariablesPtr *editSFVariables      (void);

                  SFString            *editSFSelectedTechnique(void);
            const SFString            *getSFSelectedTechnique (void) const;

                  SFUInt32            *editSFStateVariables (void);
            const SFUInt32            *getSFStateVariables  (void) const;
            const MFUnrecCgFXTechniquePtr *getMFTechniques      (void) const;
                  MFUnrecCgFXTechniquePtr *editMFTechniques     (void);
            const MFUnrecTextureObjChunkPtr *getMFTextures        (void) const;
                  MFUnrecTextureObjChunkPtr *editMFTextures       (void);


                  ShaderProgramVariables * getVariables      (void) const;

                  std::string         &editSelectedTechnique(void);
            const std::string         &getSelectedTechnique (void) const;

                  UInt32              &editStateVariables (void);
                  UInt32               getStateVariables  (void) const;

                  CgFXTechnique * getTechniques     (const UInt32 index) const;

                  TextureObjChunk * getTextures       (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setVariables      (ShaderProgramVariables * const value);
            void setSelectedTechnique(const std::string &value);
            void setStateVariables (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToTechniques           (CgFXTechnique * const value   );
    void assignTechniques           (const MFUnrecCgFXTechniquePtr &value);
    void removeFromTechniques (UInt32                uiIndex );
    void removeObjFromTechniques(CgFXTechnique * const value   );
    void clearTechniques            (void                          );

    void pushToTextures            (TextureObjChunk * const value   );
    void assignTextures            (const MFUnrecTextureObjChunkPtr &value);
    void removeFromTextures (UInt32                uiIndex );
    void removeObjFromTextures(TextureObjChunk * const value   );
    void clearTextures              (void                          );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      CgFXMaterialBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const CgFXMaterialBase &source);
};

typedef CgFXMaterialBase *CgFXMaterialBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCGFXMATERIALBASE_H_ */
