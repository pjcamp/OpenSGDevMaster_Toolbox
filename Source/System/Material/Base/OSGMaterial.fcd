<?xml version="1.0"?>

<FieldContainer
   name="Material"
   parent="AttachmentContainer"
   library="System"
   structure="abstract"
   pointerfieldtypes="both"
   systemcomponent="true"
   parentsystemcomponent="true"
   decoratable="false"
   useLocalIncludes="false"
   docGroupBase="GrpSystemMaterial"
   >
  
  The material base class.
  
  \ext
  The Material has two interfaces to return a State that represents it.
  OSG::Material::makeState() creates a new OSG::State and returns it. This is 
  ok for rare use, but for every frame this is going to be too expensive. For 
  these cases OSG::Material::rebuildState() and OSG::Material::getState() are 
  used, which modify and return an internal copy of the State. 
  
  The other method to implement is OSG::Material::isTransparent(), to identify
  transparent materials to be rendered after the opaque ones.
  \endext
  <Field
	 name="sortKey"
	 type="Int32"
	 cardinality="single"
	 visibility="external"
	 defaultValue="0"
	 access="public"
	 >
  </Field>
  <Field
	 name="transparencyMode"
	 type="Int32"
	 cardinality="single"
	 visibility="external"
	 defaultValue="0"
	 access="public"
	 >
	Set the transparency mode, possible values are TransparencyAutoDetection,
	TransparencyForceTransparent and TransparencyForceOpaque 
  </Field>
</FieldContainer>
