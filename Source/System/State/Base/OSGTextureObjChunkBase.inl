/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureObjChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TextureObjChunkBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TextureObjChunkBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TextureObjChunkBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the TextureObjChunk::_sfImage field.
inline
Image * TextureObjChunkBase::getImage(void) const
{
    return _sfImage.getValue();
}

//! Set the value of the TextureObjChunk::_sfImage field.
inline
void TextureObjChunkBase::setImage(Image * const value)
{
    editSField(ImageFieldMask);

    _sfImage.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfInternalFormat field.

inline
GLenum &TextureObjChunkBase::editInternalFormat(void)
{
    editSField(InternalFormatFieldMask);

    return _sfInternalFormat.getValue();
}

//! Get the value of the TextureObjChunk::_sfInternalFormat field.
inline
const GLenum &TextureObjChunkBase::getInternalFormat(void) const
{
    return _sfInternalFormat.getValue();
}

//! Set the value of the TextureObjChunk::_sfInternalFormat field.
inline
void TextureObjChunkBase::setInternalFormat(const GLenum &value)
{
    editSField(InternalFormatFieldMask);

    _sfInternalFormat.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfExternalFormat field.

inline
GLenum &TextureObjChunkBase::editExternalFormat(void)
{
    editSField(ExternalFormatFieldMask);

    return _sfExternalFormat.getValue();
}

//! Get the value of the TextureObjChunk::_sfExternalFormat field.
inline
const GLenum &TextureObjChunkBase::getExternalFormat(void) const
{
    return _sfExternalFormat.getValue();
}

//! Set the value of the TextureObjChunk::_sfExternalFormat field.
inline
void TextureObjChunkBase::setExternalFormat(const GLenum &value)
{
    editSField(ExternalFormatFieldMask);

    _sfExternalFormat.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfScale field.

inline
bool &TextureObjChunkBase::editScale(void)
{
    editSField(ScaleFieldMask);

    return _sfScale.getValue();
}

//! Get the value of the TextureObjChunk::_sfScale field.
inline
      bool  TextureObjChunkBase::getScale(void) const
{
    return _sfScale.getValue();
}

//! Set the value of the TextureObjChunk::_sfScale field.
inline
void TextureObjChunkBase::setScale(const bool value)
{
    editSField(ScaleFieldMask);

    _sfScale.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfFrame field.

inline
UInt32 &TextureObjChunkBase::editFrame(void)
{
    editSField(FrameFieldMask);

    return _sfFrame.getValue();
}

//! Get the value of the TextureObjChunk::_sfFrame field.
inline
      UInt32  TextureObjChunkBase::getFrame(void) const
{
    return _sfFrame.getValue();
}

//! Set the value of the TextureObjChunk::_sfFrame field.
inline
void TextureObjChunkBase::setFrame(const UInt32 value)
{
    editSField(FrameFieldMask);

    _sfFrame.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfMinFilter field.

inline
GLenum &TextureObjChunkBase::editMinFilter(void)
{
    editSField(MinFilterFieldMask);

    return _sfMinFilter.getValue();
}

//! Get the value of the TextureObjChunk::_sfMinFilter field.
inline
const GLenum &TextureObjChunkBase::getMinFilter(void) const
{
    return _sfMinFilter.getValue();
}

//! Set the value of the TextureObjChunk::_sfMinFilter field.
inline
void TextureObjChunkBase::setMinFilter(const GLenum &value)
{
    editSField(MinFilterFieldMask);

    _sfMinFilter.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfMagFilter field.

inline
GLenum &TextureObjChunkBase::editMagFilter(void)
{
    editSField(MagFilterFieldMask);

    return _sfMagFilter.getValue();
}

//! Get the value of the TextureObjChunk::_sfMagFilter field.
inline
const GLenum &TextureObjChunkBase::getMagFilter(void) const
{
    return _sfMagFilter.getValue();
}

//! Set the value of the TextureObjChunk::_sfMagFilter field.
inline
void TextureObjChunkBase::setMagFilter(const GLenum &value)
{
    editSField(MagFilterFieldMask);

    _sfMagFilter.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfWrapS field.

inline
GLenum &TextureObjChunkBase::editWrapS(void)
{
    editSField(WrapSFieldMask);

    return _sfWrapS.getValue();
}

//! Get the value of the TextureObjChunk::_sfWrapS field.
inline
const GLenum &TextureObjChunkBase::getWrapS(void) const
{
    return _sfWrapS.getValue();
}

//! Set the value of the TextureObjChunk::_sfWrapS field.
inline
void TextureObjChunkBase::setWrapS(const GLenum &value)
{
    editSField(WrapSFieldMask);

    _sfWrapS.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfWrapT field.

inline
GLenum &TextureObjChunkBase::editWrapT(void)
{
    editSField(WrapTFieldMask);

    return _sfWrapT.getValue();
}

//! Get the value of the TextureObjChunk::_sfWrapT field.
inline
const GLenum &TextureObjChunkBase::getWrapT(void) const
{
    return _sfWrapT.getValue();
}

//! Set the value of the TextureObjChunk::_sfWrapT field.
inline
void TextureObjChunkBase::setWrapT(const GLenum &value)
{
    editSField(WrapTFieldMask);

    _sfWrapT.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfWrapR field.

inline
GLenum &TextureObjChunkBase::editWrapR(void)
{
    editSField(WrapRFieldMask);

    return _sfWrapR.getValue();
}

//! Get the value of the TextureObjChunk::_sfWrapR field.
inline
const GLenum &TextureObjChunkBase::getWrapR(void) const
{
    return _sfWrapR.getValue();
}

//! Set the value of the TextureObjChunk::_sfWrapR field.
inline
void TextureObjChunkBase::setWrapR(const GLenum &value)
{
    editSField(WrapRFieldMask);

    _sfWrapR.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfGLId field.

inline
GLenum &TextureObjChunkBase::editGLId(void)
{
    editSField(GLIdFieldMask);

    return _sfGLId.getValue();
}

//! Get the value of the TextureObjChunk::_sfGLId field.
inline
const GLenum &TextureObjChunkBase::getGLId(void) const
{
    return _sfGLId.getValue();
}

//! Set the value of the TextureObjChunk::_sfGLId field.
inline
void TextureObjChunkBase::setGLId(const GLenum &value)
{
    editSField(GLIdFieldMask);

    _sfGLId.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfPriority field.

inline
Real32 &TextureObjChunkBase::editPriority(void)
{
    editSField(PriorityFieldMask);

    return _sfPriority.getValue();
}

//! Get the value of the TextureObjChunk::_sfPriority field.
inline
      Real32  TextureObjChunkBase::getPriority(void) const
{
    return _sfPriority.getValue();
}

//! Set the value of the TextureObjChunk::_sfPriority field.
inline
void TextureObjChunkBase::setPriority(const Real32 value)
{
    editSField(PriorityFieldMask);

    _sfPriority.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyLeft field.

inline
Int32 &TextureObjChunkBase::editDirtyLeft(void)
{
    editSField(DirtyLeftFieldMask);

    return _sfDirtyLeft.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyLeft field.
inline
      Int32  TextureObjChunkBase::getDirtyLeft(void) const
{
    return _sfDirtyLeft.getValue();
}

//! Set the value of the TextureObjChunk::_sfDirtyLeft field.
inline
void TextureObjChunkBase::setDirtyLeft(const Int32 value)
{
    editSField(DirtyLeftFieldMask);

    _sfDirtyLeft.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMinX field.

inline
Int32 &TextureObjChunkBase::editDirtyMinX(void)
{
    editSField(DirtyMinXFieldMask);

    return _sfDirtyMinX.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMinX field.
inline
      Int32  TextureObjChunkBase::getDirtyMinX(void) const
{
    return _sfDirtyMinX.getValue();
}

//! Set the value of the TextureObjChunk::_sfDirtyMinX field.
inline
void TextureObjChunkBase::setDirtyMinX(const Int32 value)
{
    editSField(DirtyMinXFieldMask);

    _sfDirtyMinX.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMaxX field.

inline
Int32 &TextureObjChunkBase::editDirtyMaxX(void)
{
    editSField(DirtyMaxXFieldMask);

    return _sfDirtyMaxX.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMaxX field.
inline
      Int32  TextureObjChunkBase::getDirtyMaxX(void) const
{
    return _sfDirtyMaxX.getValue();
}

//! Set the value of the TextureObjChunk::_sfDirtyMaxX field.
inline
void TextureObjChunkBase::setDirtyMaxX(const Int32 value)
{
    editSField(DirtyMaxXFieldMask);

    _sfDirtyMaxX.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMinY field.

inline
Int32 &TextureObjChunkBase::editDirtyMinY(void)
{
    editSField(DirtyMinYFieldMask);

    return _sfDirtyMinY.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMinY field.
inline
      Int32  TextureObjChunkBase::getDirtyMinY(void) const
{
    return _sfDirtyMinY.getValue();
}

//! Set the value of the TextureObjChunk::_sfDirtyMinY field.
inline
void TextureObjChunkBase::setDirtyMinY(const Int32 value)
{
    editSField(DirtyMinYFieldMask);

    _sfDirtyMinY.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMaxY field.

inline
Int32 &TextureObjChunkBase::editDirtyMaxY(void)
{
    editSField(DirtyMaxYFieldMask);

    return _sfDirtyMaxY.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMaxY field.
inline
      Int32  TextureObjChunkBase::getDirtyMaxY(void) const
{
    return _sfDirtyMaxY.getValue();
}

//! Set the value of the TextureObjChunk::_sfDirtyMaxY field.
inline
void TextureObjChunkBase::setDirtyMaxY(const Int32 value)
{
    editSField(DirtyMaxYFieldMask);

    _sfDirtyMaxY.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMinZ field.

inline
Int32 &TextureObjChunkBase::editDirtyMinZ(void)
{
    editSField(DirtyMinZFieldMask);

    return _sfDirtyMinZ.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMinZ field.
inline
      Int32  TextureObjChunkBase::getDirtyMinZ(void) const
{
    return _sfDirtyMinZ.getValue();
}

//! Set the value of the TextureObjChunk::_sfDirtyMinZ field.
inline
void TextureObjChunkBase::setDirtyMinZ(const Int32 value)
{
    editSField(DirtyMinZFieldMask);

    _sfDirtyMinZ.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMaxZ field.

inline
Int32 &TextureObjChunkBase::editDirtyMaxZ(void)
{
    editSField(DirtyMaxZFieldMask);

    return _sfDirtyMaxZ.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMaxZ field.
inline
      Int32  TextureObjChunkBase::getDirtyMaxZ(void) const
{
    return _sfDirtyMaxZ.getValue();
}

//! Set the value of the TextureObjChunk::_sfDirtyMaxZ field.
inline
void TextureObjChunkBase::setDirtyMaxZ(const Int32 value)
{
    editSField(DirtyMaxZFieldMask);

    _sfDirtyMaxZ.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfAnisotropy field.

inline
Real32 &TextureObjChunkBase::editAnisotropy(void)
{
    editSField(AnisotropyFieldMask);

    return _sfAnisotropy.getValue();
}

//! Get the value of the TextureObjChunk::_sfAnisotropy field.
inline
      Real32  TextureObjChunkBase::getAnisotropy(void) const
{
    return _sfAnisotropy.getValue();
}

//! Set the value of the TextureObjChunk::_sfAnisotropy field.
inline
void TextureObjChunkBase::setAnisotropy(const Real32 value)
{
    editSField(AnisotropyFieldMask);

    _sfAnisotropy.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfBorderColor field.

inline
Color4f &TextureObjChunkBase::editBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return _sfBorderColor.getValue();
}

//! Get the value of the TextureObjChunk::_sfBorderColor field.
inline
const Color4f &TextureObjChunkBase::getBorderColor(void) const
{
    return _sfBorderColor.getValue();
}

//! Set the value of the TextureObjChunk::_sfBorderColor field.
inline
void TextureObjChunkBase::setBorderColor(const Color4f &value)
{
    editSField(BorderColorFieldMask);

    _sfBorderColor.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfCompareMode field.

inline
GLenum &TextureObjChunkBase::editCompareMode(void)
{
    editSField(CompareModeFieldMask);

    return _sfCompareMode.getValue();
}

//! Get the value of the TextureObjChunk::_sfCompareMode field.
inline
const GLenum &TextureObjChunkBase::getCompareMode(void) const
{
    return _sfCompareMode.getValue();
}

//! Set the value of the TextureObjChunk::_sfCompareMode field.
inline
void TextureObjChunkBase::setCompareMode(const GLenum &value)
{
    editSField(CompareModeFieldMask);

    _sfCompareMode.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfCompareFunc field.

inline
GLenum &TextureObjChunkBase::editCompareFunc(void)
{
    editSField(CompareFuncFieldMask);

    return _sfCompareFunc.getValue();
}

//! Get the value of the TextureObjChunk::_sfCompareFunc field.
inline
const GLenum &TextureObjChunkBase::getCompareFunc(void) const
{
    return _sfCompareFunc.getValue();
}

//! Set the value of the TextureObjChunk::_sfCompareFunc field.
inline
void TextureObjChunkBase::setCompareFunc(const GLenum &value)
{
    editSField(CompareFuncFieldMask);

    _sfCompareFunc.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDepthMode field.

inline
GLenum &TextureObjChunkBase::editDepthMode(void)
{
    editSField(DepthModeFieldMask);

    return _sfDepthMode.getValue();
}

//! Get the value of the TextureObjChunk::_sfDepthMode field.
inline
const GLenum &TextureObjChunkBase::getDepthMode(void) const
{
    return _sfDepthMode.getValue();
}

//! Set the value of the TextureObjChunk::_sfDepthMode field.
inline
void TextureObjChunkBase::setDepthMode(const GLenum &value)
{
    editSField(DepthModeFieldMask);

    _sfDepthMode.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfBorderWidth field.

inline
UInt32 &TextureObjChunkBase::editBorderWidth(void)
{
    editSField(BorderWidthFieldMask);

    return _sfBorderWidth.getValue();
}

//! Get the value of the TextureObjChunk::_sfBorderWidth field.
inline
      UInt32  TextureObjChunkBase::getBorderWidth(void) const
{
    return _sfBorderWidth.getValue();
}

//! Set the value of the TextureObjChunk::_sfBorderWidth field.
inline
void TextureObjChunkBase::setBorderWidth(const UInt32 value)
{
    editSField(BorderWidthFieldMask);

    _sfBorderWidth.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfSkipMipMapLevels field.

inline
Real32 &TextureObjChunkBase::editSkipMipMapLevels(void)
{
    editSField(SkipMipMapLevelsFieldMask);

    return _sfSkipMipMapLevels.getValue();
}

//! Get the value of the TextureObjChunk::_sfSkipMipMapLevels field.
inline
      Real32  TextureObjChunkBase::getSkipMipMapLevels(void) const
{
    return _sfSkipMipMapLevels.getValue();
}

//! Set the value of the TextureObjChunk::_sfSkipMipMapLevels field.
inline
void TextureObjChunkBase::setSkipMipMapLevels(const Real32 value)
{
    editSField(SkipMipMapLevelsFieldMask);

    _sfSkipMipMapLevels.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TextureObjChunkBase::execSync (      TextureObjChunkBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
        _sfImage.syncWith(pFrom->_sfImage);

    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
        _sfInternalFormat.syncWith(pFrom->_sfInternalFormat);

    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
        _sfExternalFormat.syncWith(pFrom->_sfExternalFormat);

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
        _sfScale.syncWith(pFrom->_sfScale);

    if(FieldBits::NoField != (FrameFieldMask & whichField))
        _sfFrame.syncWith(pFrom->_sfFrame);

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
        _sfMinFilter.syncWith(pFrom->_sfMinFilter);

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
        _sfMagFilter.syncWith(pFrom->_sfMagFilter);

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
        _sfWrapS.syncWith(pFrom->_sfWrapS);

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
        _sfWrapT.syncWith(pFrom->_sfWrapT);

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
        _sfWrapR.syncWith(pFrom->_sfWrapR);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pFrom->_sfGLId);

    if(FieldBits::NoField != (PriorityFieldMask & whichField))
        _sfPriority.syncWith(pFrom->_sfPriority);

    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
        _sfDirtyLeft.syncWith(pFrom->_sfDirtyLeft);

    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
        _sfDirtyMinX.syncWith(pFrom->_sfDirtyMinX);

    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
        _sfDirtyMaxX.syncWith(pFrom->_sfDirtyMaxX);

    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
        _sfDirtyMinY.syncWith(pFrom->_sfDirtyMinY);

    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
        _sfDirtyMaxY.syncWith(pFrom->_sfDirtyMaxY);

    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
        _sfDirtyMinZ.syncWith(pFrom->_sfDirtyMinZ);

    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
        _sfDirtyMaxZ.syncWith(pFrom->_sfDirtyMaxZ);

    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
        _sfAnisotropy.syncWith(pFrom->_sfAnisotropy);

    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
        _sfBorderColor.syncWith(pFrom->_sfBorderColor);

    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
        _sfCompareMode.syncWith(pFrom->_sfCompareMode);

    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
        _sfCompareFunc.syncWith(pFrom->_sfCompareFunc);

    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
        _sfDepthMode.syncWith(pFrom->_sfDepthMode);

    if(FieldBits::NoField != (BorderWidthFieldMask & whichField))
        _sfBorderWidth.syncWith(pFrom->_sfBorderWidth);

    if(FieldBits::NoField != (SkipMipMapLevelsFieldMask & whichField))
        _sfSkipMipMapLevels.syncWith(pFrom->_sfSkipMipMapLevels);
}
#endif


inline
const Char8 *TextureObjChunkBase::getClassname(void)
{
    return "TextureObjChunk";
}
OSG_GEN_CONTAINERPTR(TextureObjChunk);

OSG_END_NAMESPACE

