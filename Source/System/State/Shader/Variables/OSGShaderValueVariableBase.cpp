/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderValueVariable!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGShaderValueVariableBase.h"
#include "OSGShaderValueVariable.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShaderValueVariable
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt16          ShaderValueVariableBase::_mfVariableIdx
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ShaderValueVariable *>::_type("ShaderValueVariablePtr", "ShaderVariablePtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ShaderValueVariable *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ShaderValueVariable *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ShaderValueVariable *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ShaderValueVariableBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUInt16::Description(
        MFUInt16::getClassType(),
        "variableIdx",
        "",
        VariableIdxFieldId, VariableIdxFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast     <FieldEditMethodSig>(&ShaderValueVariable::invalidEditField),
        static_cast     <FieldGetMethodSig >(&ShaderValueVariable::invalidGetField));

    oType.addInitialDesc(pDesc);
}


ShaderValueVariableBase::TypeObject ShaderValueVariableBase::_type(
    ShaderValueVariableBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    ShaderValueVariable::initMethod,
    ShaderValueVariable::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ShaderValueVariable::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "     name=\"ShaderValueVariable\"\n"
    "     parent=\"ShaderVariable\"\n"
    "     library=\"System\"\n"
    "     pointerfieldtypes=\"both\"\n"
    "     structure=\"abstract\"\n"
    "     systemcomponent=\"true\"\n"
    "     parentsystemcomponent=\"true\"\n"
    "     decoratable=\"false\"\n"
    "     useLocalIncludes=\"false\"\n"
    "     docGroupBase=\"GrpSystemShader\"\n"
    "     >\n"
    "    <Field\n"
    "\t name=\"variableIdx\"\n"
    "\t type=\"UInt16\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"internal\"\n"
    "\t access=\"none\"\n"
    "         fieldFlags=\"FClusterLocal\"\n"
    "\t >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShaderValueVariableBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShaderValueVariableBase::getType(void) const
{
    return _type;
}

UInt32 ShaderValueVariableBase::getContainerSize(void) const
{
    return sizeof(ShaderValueVariable);
}

/*------------------------- decorator get ------------------------------*/







/*------------------------------ access -----------------------------------*/

UInt32 ShaderValueVariableBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (VariableIdxFieldMask & whichField))
    {
        returnValue += _mfVariableIdx.getBinSize();
    }

    return returnValue;
}

void ShaderValueVariableBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (VariableIdxFieldMask & whichField))
    {
        _mfVariableIdx.copyToBin(pMem);
    }
}

void ShaderValueVariableBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (VariableIdxFieldMask & whichField))
    {
        editMField(VariableIdxFieldMask, _mfVariableIdx);
        _mfVariableIdx.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

ShaderValueVariableBase::ShaderValueVariableBase(void) :
    Inherited(),
    _mfVariableIdx            ()
{
}

ShaderValueVariableBase::ShaderValueVariableBase(const ShaderValueVariableBase &source) :
    Inherited(source),
    _mfVariableIdx            (source._mfVariableIdx            )
{
}


/*-------------------------- destructors ----------------------------------*/

ShaderValueVariableBase::~ShaderValueVariableBase(void)
{
}


GetFieldHandlePtr ShaderValueVariableBase::getHandleVariableIdx     (void) const
{
    MFUInt16::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr ShaderValueVariableBase::editHandleVariableIdx    (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ShaderValueVariableBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShaderValueVariable *pThis = static_cast<ShaderValueVariable *>(this);

    pThis->execSync(static_cast<ShaderValueVariable *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ShaderValueVariableBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableIdx.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
