/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderParameterChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGShaderParameter.h"         // Parameters Class

#include "OSGShaderParameterChunkBase.h"
#include "OSGShaderParameterChunk.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShaderParameterChunk
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ShaderParameter * ShaderParameterChunkBase::_mfParameters
    parameter list
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ShaderParameterChunk *>::_type("ShaderParameterChunkPtr", "StateChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ShaderParameterChunk *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ShaderParameterChunk *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ShaderParameterChunk *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ShaderParameterChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecChildShaderParameterPtr::Description(
        MFUnrecChildShaderParameterPtr::getClassType(),
        "parameters",
        "parameter list\n",
        ParametersFieldId, ParametersFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderParameterChunk::editHandleParameters),
        static_cast<FieldGetMethodSig >(&ShaderParameterChunk::getHandleParameters));

    oType.addInitialDesc(pDesc);
}


ShaderParameterChunkBase::TypeObject ShaderParameterChunkBase::_type(
    ShaderParameterChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    ShaderParameterChunk::initMethod,
    ShaderParameterChunk::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ShaderParameterChunk::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ShaderParameterChunk\"\n"
    "\tparent=\"StateChunk\"\n"
    "\tlibrary=\"State\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"parameters\"\n"
    "\t\ttype=\"ShaderParameter\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        linkParentField=\"Parents\"\n"
    "\n"
    "        pushToFieldAs=\"addParameter\"\n"
    "        insertIntoMFieldAs=\"insertParameter\"\n"
    "        replaceInMFieldIndexAs=\"replaceParameter\"\n"
    "        replaceInMFieldObjectAs=\"replaceParameterByObj\"\n"
    "        removeFromMFieldIndexAs=\"subParameter\"\n"
    "        removeFromMFieldObjectAs=\"subParameterByObj\"\n"
    "        clearFieldAs=\"clearParameters\"        \n"
    "\t>\n"
    "\tparameter list\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShaderParameterChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShaderParameterChunkBase::getType(void) const
{
    return _type;
}

UInt32 ShaderParameterChunkBase::getContainerSize(void) const
{
    return sizeof(ShaderParameterChunk);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ShaderParameterChunk::_mfParameters field.
const MFUnrecChildShaderParameterPtr *ShaderParameterChunkBase::getMFParameters(void) const
{
    return &_mfParameters;
}

MFUnrecChildShaderParameterPtr *ShaderParameterChunkBase::editMFParameters     (void)
{
    editMField(ParametersFieldMask, _mfParameters);

    return &_mfParameters;
}



void ShaderParameterChunkBase::addParameter(ShaderParameter * const value)
{
    editMField(ParametersFieldMask, _mfParameters);

    _mfParameters.push_back(value);
}

void ShaderParameterChunkBase::assignParameters(const MFUnrecChildShaderParameterPtr &value)
{
    MFUnrecChildShaderParameterPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildShaderParameterPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<ShaderParameterChunk *>(this)->clearParameters();

    while(elemIt != elemEnd)
    {
        this->addParameter(*elemIt);

        ++elemIt;
    }
}

void ShaderParameterChunkBase::subParameter(UInt32 uiIndex)
{
    if(uiIndex < _mfParameters.size())
    {
        editMField(ParametersFieldMask, _mfParameters);

        _mfParameters.erase(uiIndex);
    }
}

void ShaderParameterChunkBase::subParameterByObj(ShaderParameter * const value)
{
    Int32 iElemIdx = _mfParameters.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ParametersFieldMask, _mfParameters);

        _mfParameters.erase(iElemIdx);
    }
}
void ShaderParameterChunkBase::clearParameters(void)
{
    editMField(ParametersFieldMask, _mfParameters);


    _mfParameters.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 ShaderParameterChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
    {
        returnValue += _mfParameters.getBinSize();
    }

    return returnValue;
}

void ShaderParameterChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
    {
        _mfParameters.copyToBin(pMem);
    }
}

void ShaderParameterChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
    {
        editMField(ParametersFieldMask, _mfParameters);
        _mfParameters.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

ShaderParameterChunkBase::ShaderParameterChunkBase(void) :
    Inherited(),
    _mfParameters             (this,
                          ParametersFieldId,
                          ShaderParameter::ParentsFieldId)
{
}

ShaderParameterChunkBase::ShaderParameterChunkBase(const ShaderParameterChunkBase &source) :
    Inherited(source),
    _mfParameters             (this,
                          ParametersFieldId,
                          ShaderParameter::ParentsFieldId)
{
}


/*-------------------------- destructors ----------------------------------*/

ShaderParameterChunkBase::~ShaderParameterChunkBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool ShaderParameterChunkBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == ParametersFieldId)
    {
        ShaderParameter * pTypedChild =
            dynamic_cast<ShaderParameter *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfParameters.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(ParametersFieldMask, _mfParameters);

                _mfParameters.erase(iChildIdx);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void ShaderParameterChunkBase::onCreate(const ShaderParameterChunk *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ShaderParameterChunk *pThis = static_cast<ShaderParameterChunk *>(this);

        MFUnrecChildShaderParameterPtr::const_iterator ParametersIt  =
            source->_mfParameters.begin();
        MFUnrecChildShaderParameterPtr::const_iterator ParametersEnd =
            source->_mfParameters.end  ();

        while(ParametersIt != ParametersEnd)
        {
            pThis->addParameter(*ParametersIt);

            ++ParametersIt;
        }
    }
}

GetFieldHandlePtr ShaderParameterChunkBase::getHandleParameters      (void) const
{
    MFUnrecChildShaderParameterPtr::GetHandlePtr returnValue(
        new  MFUnrecChildShaderParameterPtr::GetHandle(
             &_mfParameters,
             this->getType().getFieldDesc(ParametersFieldId),
             const_cast<ShaderParameterChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderParameterChunkBase::editHandleParameters     (void)
{
    MFUnrecChildShaderParameterPtr::EditHandlePtr returnValue(
        new  MFUnrecChildShaderParameterPtr::EditHandle(
             &_mfParameters,
             this->getType().getFieldDesc(ParametersFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&ShaderParameterChunk::addParameter,
                    static_cast<ShaderParameterChunk *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&ShaderParameterChunk::subParameter,
                    static_cast<ShaderParameterChunk *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&ShaderParameterChunk::subParameterByObj,
                    static_cast<ShaderParameterChunk *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&ShaderParameterChunk::clearParameters,
                    static_cast<ShaderParameterChunk *>(this)));

    editMField(ParametersFieldMask, _mfParameters);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ShaderParameterChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShaderParameterChunk *pThis = static_cast<ShaderParameterChunk *>(this);

    pThis->execSync(static_cast<ShaderParameterChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ShaderParameterChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ShaderParameterChunk *>(this)->clearParameters();


}


OSG_END_NAMESPACE
