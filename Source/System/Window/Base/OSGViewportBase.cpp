/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Viewport!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // Parent Class
#include "OSGCamera.h"                  // Camera Class
#include "OSGNode.h"                    // Root Class
#include "OSGBackground.h"              // Background Class
#include "OSGForeground.h"              // Foregrounds Class
#include "OSGRenderOptions.h"           // RenderOptions Class

#include "OSGViewportBase.h"
#include "OSGViewport.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Viewport
    A Viewport is a part of the Window it is attached to used for rendering. See
    \ref PageSystemWindowViewports for a description.

    The size of the viewport is defined by the _sfLeft, _sfRight, _sfBottom and
    _sfTop Fields. The Window this Viewport is attached is stored in _sfWindow.
    _sfBackground defines the background clearing method, the
    _sfRoot and _sfCamera Fields the scene being rendered and the camera used to
    view it. The optional _mfForegrounds define which information are added or
    actions are executed after the Viewport has been rendered.

    \ext

    To create a new Viewport the draw and render methods should be overridden. 

    \endext

    \dev

    When adding fields to the Viewport, make sure to add the code to copy them to
    all the different ClusterWindows!

    \enddev
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          ViewportBase::_sfLeft
    The left edge of the viewport. Values between 0 and 1 are relative to the 
    size of the Window, values >1 are absolute pixel coordinates.
    All other values are illegal.
*/

/*! \var Real32          ViewportBase::_sfRight
    The right edge of the viewport. Values between 0 and 1 are relative to the 
    size of	the Window, values >1 are absolute pixel coordinates.
    All other values are illegal.
*/

/*! \var Real32          ViewportBase::_sfBottom
    The bottom edge of the viewport. Values between 0 and 1 are relative to 
    the size of the Window, values >1 are absolute pixel coordinates.
    All other values are illegal.
*/

/*! \var Real32          ViewportBase::_sfTop
    The top edge of the viewport. Values between 0 and 1 are relative to the 
    size of the Window, values >1 are absolute pixel coordinates.
    All other values are illegal.
*/

/*! \var FieldContainer * ViewportBase::_sfParent
    The Window this viewport is contained in.
*/

/*! \var Camera *        ViewportBase::_sfCamera
    The Camera used to render the viewport.
*/

/*! \var Node *          ViewportBase::_sfRoot
    The root of the tree that is displayed in this viewport.
*/

/*! \var Background *    ViewportBase::_sfBackground
    The background used to clear this viewport.
*/

/*! \var Foreground *    ViewportBase::_mfForegrounds
    The foreground additions to the rendered image.
*/

/*! \var UInt32          ViewportBase::_sfTravMask
    The foreground additions to the rendered image.
*/

/*! \var bool            ViewportBase::_sfEnabled
    Enabled is used to turn drawing on and off of a viewport.
*/

/*! \var Real32          ViewportBase::_sfDrawTime
    Drawtime of the last frame using this viewport.
*/

/*! \var Int32           ViewportBase::_sfDrawableId
    DrawableId to select viewport dependent elements (e.g. Distortion filter).
*/

/*! \var RenderOptions * ViewportBase::_sfRenderOptions
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Viewport *>::_type("ViewportPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Viewport *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Viewport *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Viewport *,
                           0);

DataType &FieldTraits< Viewport *, 1 >::getType(void)
{
    return FieldTraits<Viewport *, 0>::getType();
}


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      Viewport *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ViewportBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "left",
        "The left edge of the viewport. Values between 0 and 1 are relative to the \n"
        "size of the Window, values >1 are absolute pixel coordinates.\n"
        "All other values are illegal.\n",
        LeftFieldId, LeftFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleLeft),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleLeft));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "right",
        "The right edge of the viewport. Values between 0 and 1 are relative to the \n"
        "size of\tthe Window, values >1 are absolute pixel coordinates.\n"
        "All other values are illegal.\n",
        RightFieldId, RightFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleRight),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleRight));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "bottom",
        "The bottom edge of the viewport. Values between 0 and 1 are relative to \n"
        "the size of the Window, values >1 are absolute pixel coordinates.\n"
        "All other values are illegal.\n",
        BottomFieldId, BottomFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleBottom),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleBottom));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "top",
        "The top edge of the viewport. Values between 0 and 1 are relative to the \n"
        "size of the Window, values >1 are absolute pixel coordinates.\n"
        "All other values are illegal.\n",
        TopFieldId, TopFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleTop),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleTop));

    oType.addInitialDesc(pDesc);

    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "parent",
        "The Window this viewport is contained in.\n",
        ParentFieldId, ParentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&Viewport::invalidEditField),
        static_cast     <FieldGetMethodSig >(&Viewport::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecCameraPtr::Description(
        SFUnrecCameraPtr::getClassType(),
        "camera",
        "The Camera used to render the viewport.\n",
        CameraFieldId, CameraFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleCamera),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleCamera));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "root",
        "The root of the tree that is displayed in this viewport.\n",
        RootFieldId, RootFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleRoot),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleRoot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBackgroundPtr::Description(
        SFUnrecBackgroundPtr::getClassType(),
        "background",
        "The background used to clear this viewport.\n",
        BackgroundFieldId, BackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleBackground),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecForegroundPtr::Description(
        MFUnrecForegroundPtr::getClassType(),
        "foregrounds",
        "The foreground additions to the rendered image.\n",
        ForegroundsFieldId, ForegroundsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleForegrounds),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleForegrounds));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "travMask",
        "The foreground additions to the rendered image.\n",
        TravMaskFieldId, TravMaskFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleTravMask),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleTravMask));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "enabled",
        "Enabled is used to turn drawing on and off of a viewport.\n",
        EnabledFieldId, EnabledFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleEnabled),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleEnabled));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "drawTime",
        "Drawtime of the last frame using this viewport.\n",
        DrawTimeFieldId, DrawTimeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleDrawTime),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleDrawTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "drawableId",
        "DrawableId to select viewport dependent elements (e.g. Distortion filter).\n",
        DrawableIdFieldId, DrawableIdFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleDrawableId),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleDrawableId));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecRenderOptionsPtr::Description(
        SFUnrecRenderOptionsPtr::getClassType(),
        "renderOptions",
        "",
        RenderOptionsFieldId, RenderOptionsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Viewport::editHandleRenderOptions),
        static_cast<FieldGetMethodSig >(&Viewport::getHandleRenderOptions));

    oType.addInitialDesc(pDesc);
}


ViewportBase::TypeObject ViewportBase::_type(
    ViewportBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ViewportBase::createEmptyLocal),
    Viewport::initMethod,
    Viewport::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Viewport::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"Viewport\"\n"
    "   parent=\"AttachmentContainer\"\n"
    "   library=\"System\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   childFields=\"multi\"\n"
    "   docGroupBase=\"GrpSystemWindow\"\n"
    "   >\n"
    "\n"
    "A Viewport is a part of the Window it is attached to used for rendering. See\n"
    "\\ref PageSystemWindowViewports for a description.\n"
    "\n"
    "The size of the viewport is defined by the _sfLeft, _sfRight, _sfBottom and\n"
    "_sfTop Fields. The Window this Viewport is attached is stored in _sfWindow.\n"
    "_sfBackground defines the background clearing method, the\n"
    "_sfRoot and _sfCamera Fields the scene being rendered and the camera used to\n"
    "view it. The optional _mfForegrounds define which information are added or\n"
    "actions are executed after the Viewport has been rendered.\n"
    "\n"
    "\\ext\n"
    "\n"
    "To create a new Viewport the draw and render methods should be overridden. \n"
    "\n"
    "\\endext\n"
    "\n"
    "\\dev\n"
    "\n"
    "When adding fields to the Viewport, make sure to add the code to copy them to\n"
    "all the different ClusterWindows!\n"
    "\n"
    "\\enddev\n"
    "    <Field\n"
    "\t   name=\"left\"\n"
    "\t   type=\"Real32\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "       defaultValue=\"0.f\"\n"
    "\t   >\n"
    "\t  The left edge of the viewport. Values between 0 and 1 are relative to the \n"
    "      size of the Window, values &gt; 1 are absolute pixel coordinates.\n"
    "      All other values are illegal.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"right\"\n"
    "\t   type=\"Real32\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "       defaultValue=\"1.f\"\n"
    "\t   >\n"
    "\t  The right edge of the viewport. Values between 0 and 1 are relative to the \n"
    "      size of\tthe Window, values &gt; 1 are absolute pixel coordinates.\n"
    "\t  All other values are illegal.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"bottom\"\n"
    "\t   type=\"Real32\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "       defaultValue=\"0.f\"\n"
    "\t   >\n"
    "\t  The bottom edge of the viewport. Values between 0 and 1 are relative to \n"
    "      the size of the Window, values &gt; 1 are absolute pixel coordinates.\n"
    "\t  All other values are illegal.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"top\"\n"
    "\t   type=\"Real32\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "       defaultValue=\"1.f\"\n"
    "\t   >\n"
    "\t  The top edge of the viewport. Values between 0 and 1 are relative to the \n"
    "      size of the Window, values &gt; 1 are absolute pixel coordinates.\n"
    "\t  All other values are illegal.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"parent\"\n"
    "\t   type=\"FieldContainer\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"none\"\n"
    "       doRefCount=\"false\"\n"
    "       passFieldMask=\"true\"\n"
    "       category=\"parentpointer\"\n"
    "\t   >\n"
    "\t  The Window this viewport is contained in.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"camera\"\n"
    "\t   type=\"CameraPtr\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "\t>\n"
    "\t  The Camera used to render the viewport.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"root\"\n"
    "\t   type=\"NodePtr\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "\t   >\n"
    "\t  The root of the tree that is displayed in this viewport.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"background\"\n"
    "\t   type=\"BackgroundPtr\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "\t   >\n"
    "\t  The background used to clear this viewport.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"foregrounds\"\n"
    "\t   type=\"ForegroundPtr\"\n"
    "\t   cardinality=\"multi\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "       pushToFieldAs=\"addForeground\"\n"
    "\t   >\n"
    "\t  The foreground additions to the rendered image.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"travMask\"\n"
    "\t   type=\"UInt32\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "       defaultValue=\"TypeTraits&lt;UInt32&gt;::getMax()\"\n"
    "\t   >\n"
    "\t  The foreground additions to the rendered image.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"enabled\"\n"
    "\t   type=\"bool\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "       defaultValue=\"true\"\n"
    "\t   >\n"
    "\t  Enabled is used to turn drawing on and off of a viewport.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"drawTime\"\n"
    "\t   type=\"Real32\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"internal\"\n"
    "       defaultValue=\"0.0f\"\n"
    "\t   access=\"public\"\n"
    "\t   >\n"
    "\t  Drawtime of the last frame using this viewport.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"drawableId\"\n"
    "\t   type=\"Int32\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"internal\"\n"
    "\t   access=\"public\"\n"
    "       defaultValue=\"-1\"\n"
    "\t   >\n"
    "      DrawableId to select viewport dependent elements (e.g. Distortion filter).\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"renderOptions\"\n"
    "\t   type=\"RenderOptionsPtr\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"external\"\n"
    "\t   access=\"public\"\n"
    "       defaultValue=\"NULL\"\n"
    "\t   >\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A Viewport is a part of the Window it is attached to used for rendering. See\n"
    "\\ref PageSystemWindowViewports for a description.\n"
    "\n"
    "The size of the viewport is defined by the _sfLeft, _sfRight, _sfBottom and\n"
    "_sfTop Fields. The Window this Viewport is attached is stored in _sfWindow.\n"
    "_sfBackground defines the background clearing method, the\n"
    "_sfRoot and _sfCamera Fields the scene being rendered and the camera used to\n"
    "view it. The optional _mfForegrounds define which information are added or\n"
    "actions are executed after the Viewport has been rendered.\n"
    "\n"
    "\\ext\n"
    "\n"
    "To create a new Viewport the draw and render methods should be overridden. \n"
    "\n"
    "\\endext\n"
    "\n"
    "\\dev\n"
    "\n"
    "When adding fields to the Viewport, make sure to add the code to copy them to\n"
    "all the different ClusterWindows!\n"
    "\n"
    "\\enddev\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ViewportBase::getType(void)
{
    return _type;
}

const FieldContainerType &ViewportBase::getType(void) const
{
    return _type;
}

UInt32 ViewportBase::getContainerSize(void) const
{
    return sizeof(Viewport);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *ViewportBase::editSFLeft(void)
{
    editSField(LeftFieldMask);

    return &_sfLeft;
}

const SFReal32 *ViewportBase::getSFLeft(void) const
{
    return &_sfLeft;
}


SFReal32 *ViewportBase::editSFRight(void)
{
    editSField(RightFieldMask);

    return &_sfRight;
}

const SFReal32 *ViewportBase::getSFRight(void) const
{
    return &_sfRight;
}


SFReal32 *ViewportBase::editSFBottom(void)
{
    editSField(BottomFieldMask);

    return &_sfBottom;
}

const SFReal32 *ViewportBase::getSFBottom(void) const
{
    return &_sfBottom;
}


SFReal32 *ViewportBase::editSFTop(void)
{
    editSField(TopFieldMask);

    return &_sfTop;
}

const SFReal32 *ViewportBase::getSFTop(void) const
{
    return &_sfTop;
}



//! Get the Viewport::_sfCamera field.
const SFUnrecCameraPtr *ViewportBase::getSFCamera(void) const
{
    return &_sfCamera;
}

SFUnrecCameraPtr    *ViewportBase::editSFCamera         (void)
{
    editSField(CameraFieldMask);

    return &_sfCamera;
}

//! Get the Viewport::_sfRoot field.
const SFUnrecNodePtr *ViewportBase::getSFRoot(void) const
{
    return &_sfRoot;
}

SFUnrecNodePtr      *ViewportBase::editSFRoot           (void)
{
    editSField(RootFieldMask);

    return &_sfRoot;
}

//! Get the Viewport::_sfBackground field.
const SFUnrecBackgroundPtr *ViewportBase::getSFBackground(void) const
{
    return &_sfBackground;
}

SFUnrecBackgroundPtr *ViewportBase::editSFBackground     (void)
{
    editSField(BackgroundFieldMask);

    return &_sfBackground;
}

//! Get the Viewport::_mfForegrounds field.
const MFUnrecForegroundPtr *ViewportBase::getMFForegrounds(void) const
{
    return &_mfForegrounds;
}

MFUnrecForegroundPtr *ViewportBase::editMFForegrounds    (void)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);

    return &_mfForegrounds;
}

SFUInt32 *ViewportBase::editSFTravMask(void)
{
    editSField(TravMaskFieldMask);

    return &_sfTravMask;
}

const SFUInt32 *ViewportBase::getSFTravMask(void) const
{
    return &_sfTravMask;
}


SFBool *ViewportBase::editSFEnabled(void)
{
    editSField(EnabledFieldMask);

    return &_sfEnabled;
}

const SFBool *ViewportBase::getSFEnabled(void) const
{
    return &_sfEnabled;
}


SFReal32 *ViewportBase::editSFDrawTime(void)
{
    editSField(DrawTimeFieldMask);

    return &_sfDrawTime;
}

const SFReal32 *ViewportBase::getSFDrawTime(void) const
{
    return &_sfDrawTime;
}


SFInt32 *ViewportBase::editSFDrawableId(void)
{
    editSField(DrawableIdFieldMask);

    return &_sfDrawableId;
}

const SFInt32 *ViewportBase::getSFDrawableId(void) const
{
    return &_sfDrawableId;
}


//! Get the Viewport::_sfRenderOptions field.
const SFUnrecRenderOptionsPtr *ViewportBase::getSFRenderOptions(void) const
{
    return &_sfRenderOptions;
}

SFUnrecRenderOptionsPtr *ViewportBase::editSFRenderOptions  (void)
{
    editSField(RenderOptionsFieldMask);

    return &_sfRenderOptions;
}



void ViewportBase::addForeground(Foreground * const value)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);

    _mfForegrounds.push_back(value);
}

void ViewportBase::assignForegrounds(const MFUnrecForegroundPtr &value)
{
    MFUnrecForegroundPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecForegroundPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Viewport *>(this)->clearForegrounds();

    while(elemIt != elemEnd)
    {
        this->addForeground(*elemIt);

        ++elemIt;
    }
}

void ViewportBase::removeFromForegrounds(UInt32 uiIndex)
{
    if(uiIndex < _mfForegrounds.size())
    {
        editMField(ForegroundsFieldMask, _mfForegrounds);

        _mfForegrounds.erase(uiIndex);
    }
}

void ViewportBase::removeObjFromForegrounds(Foreground * const value)
{
    Int32 iElemIdx = _mfForegrounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ForegroundsFieldMask, _mfForegrounds);

        _mfForegrounds.erase(iElemIdx);
    }
}
void ViewportBase::clearForegrounds(void)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);


    _mfForegrounds.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 ViewportBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        returnValue += _sfLeft.getBinSize();
    }
    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        returnValue += _sfRight.getBinSize();
    }
    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        returnValue += _sfBottom.getBinSize();
    }
    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        returnValue += _sfTop.getBinSize();
    }
    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        returnValue += _sfParent.getBinSize();
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        returnValue += _sfCamera.getBinSize();
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        returnValue += _sfRoot.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        returnValue += _sfBackground.getBinSize();
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        returnValue += _mfForegrounds.getBinSize();
    }
    if(FieldBits::NoField != (TravMaskFieldMask & whichField))
    {
        returnValue += _sfTravMask.getBinSize();
    }
    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        returnValue += _sfEnabled.getBinSize();
    }
    if(FieldBits::NoField != (DrawTimeFieldMask & whichField))
    {
        returnValue += _sfDrawTime.getBinSize();
    }
    if(FieldBits::NoField != (DrawableIdFieldMask & whichField))
    {
        returnValue += _sfDrawableId.getBinSize();
    }
    if(FieldBits::NoField != (RenderOptionsFieldMask & whichField))
    {
        returnValue += _sfRenderOptions.getBinSize();
    }

    return returnValue;
}

void ViewportBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        _sfLeft.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        _sfRight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        _sfBottom.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        _sfTop.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        _sfParent.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        _sfCamera.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        _sfRoot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _sfBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        _mfForegrounds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TravMaskFieldMask & whichField))
    {
        _sfTravMask.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DrawTimeFieldMask & whichField))
    {
        _sfDrawTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DrawableIdFieldMask & whichField))
    {
        _sfDrawableId.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RenderOptionsFieldMask & whichField))
    {
        _sfRenderOptions.copyToBin(pMem);
    }
}

void ViewportBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        editSField(LeftFieldMask);
        _sfLeft.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        editSField(RightFieldMask);
        _sfRight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        editSField(BottomFieldMask);
        _sfBottom.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        editSField(TopFieldMask);
        _sfTop.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        editSField(ParentFieldMask);
        _sfParent.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        editSField(CameraFieldMask);
        _sfCamera.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        editSField(RootFieldMask);
        _sfRoot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        editSField(BackgroundFieldMask);
        _sfBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        editMField(ForegroundsFieldMask, _mfForegrounds);
        _mfForegrounds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TravMaskFieldMask & whichField))
    {
        editSField(TravMaskFieldMask);
        _sfTravMask.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DrawTimeFieldMask & whichField))
    {
        editSField(DrawTimeFieldMask);
        _sfDrawTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DrawableIdFieldMask & whichField))
    {
        editSField(DrawableIdFieldMask);
        _sfDrawableId.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RenderOptionsFieldMask & whichField))
    {
        editSField(RenderOptionsFieldMask);
        _sfRenderOptions.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ViewportTransitPtr ViewportBase::createLocal(BitVector bFlags)
{
    ViewportTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<Viewport>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ViewportTransitPtr ViewportBase::createDependent(BitVector bFlags)
{
    ViewportTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<Viewport>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ViewportTransitPtr ViewportBase::create(void)
{
    ViewportTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<Viewport>(tmpPtr);
    }

    return fc;
}

Viewport *ViewportBase::createEmptyLocal(BitVector bFlags)
{
    Viewport *returnValue;

    newPtr<Viewport>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
Viewport *ViewportBase::createEmpty(void)
{
    Viewport *returnValue;

    newPtr<Viewport>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr ViewportBase::shallowCopyLocal(
    BitVector bFlags) const
{
    Viewport *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Viewport *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ViewportBase::shallowCopyDependent(
    BitVector bFlags) const
{
    Viewport *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Viewport *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ViewportBase::shallowCopy(void) const
{
    Viewport *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const Viewport *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

ViewportBase::ViewportBase(void) :
    Inherited(),
    _sfLeft                   (Real32(0.f)),
    _sfRight                  (Real32(1.f)),
    _sfBottom                 (Real32(0.f)),
    _sfTop                    (Real32(1.f)),
    _sfParent                 (NULL),
    _sfCamera                 (NULL),
    _sfRoot                   (NULL),
    _sfBackground             (NULL),
    _mfForegrounds            (),
    _sfTravMask               (UInt32(TypeTraits<UInt32>::getMax())),
    _sfEnabled                (bool(true)),
    _sfDrawTime               (Real32(0.0f)),
    _sfDrawableId             (Int32(-1)),
    _sfRenderOptions          (NULL)
{
}

ViewportBase::ViewportBase(const ViewportBase &source) :
    Inherited(source),
    _sfLeft                   (source._sfLeft                   ),
    _sfRight                  (source._sfRight                  ),
    _sfBottom                 (source._sfBottom                 ),
    _sfTop                    (source._sfTop                    ),
    _sfParent                 (NULL),
    _sfCamera                 (NULL),
    _sfRoot                   (NULL),
    _sfBackground             (NULL),
    _mfForegrounds            (),
    _sfTravMask               (source._sfTravMask               ),
    _sfEnabled                (source._sfEnabled                ),
    _sfDrawTime               (source._sfDrawTime               ),
    _sfDrawableId             (source._sfDrawableId             ),
    _sfRenderOptions          (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

ViewportBase::~ViewportBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool ViewportBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParent.getValue         ();

            UInt16 oldChildFieldId =
                _sfParent.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentFieldMask);

            _sfParent.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool ViewportBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParent.getValue() == pTypedParent)
            {
                editSField(ParentFieldMask);

                _sfParent.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


void ViewportBase::onCreate(const Viewport *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Viewport *pThis = static_cast<Viewport *>(this);

        pThis->setCamera(source->getCamera());

        pThis->setRoot(source->getRoot());

        pThis->setBackground(source->getBackground());

        MFUnrecForegroundPtr::const_iterator ForegroundsIt  =
            source->_mfForegrounds.begin();
        MFUnrecForegroundPtr::const_iterator ForegroundsEnd =
            source->_mfForegrounds.end  ();

        while(ForegroundsIt != ForegroundsEnd)
        {
            pThis->addForeground(*ForegroundsIt);

            ++ForegroundsIt;
        }

        pThis->setRenderOptions(source->getRenderOptions());
    }
}

GetFieldHandlePtr ViewportBase::getHandleLeft            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLeft,
             this->getType().getFieldDesc(LeftFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleLeft           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLeft,
             this->getType().getFieldDesc(LeftFieldId),
             this));


    editSField(LeftFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleRight           (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfRight,
             this->getType().getFieldDesc(RightFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleRight          (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfRight,
             this->getType().getFieldDesc(RightFieldId),
             this));


    editSField(RightFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleBottom          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBottom,
             this->getType().getFieldDesc(BottomFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleBottom         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBottom,
             this->getType().getFieldDesc(BottomFieldId),
             this));


    editSField(BottomFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleTop             (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfTop,
             this->getType().getFieldDesc(TopFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleTop            (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfTop,
             this->getType().getFieldDesc(TopFieldId),
             this));


    editSField(TopFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleParent          (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleParent         (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleCamera          (void) const
{
    SFUnrecCameraPtr::GetHandlePtr returnValue(
        new  SFUnrecCameraPtr::GetHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleCamera         (void)
{
    SFUnrecCameraPtr::EditHandlePtr returnValue(
        new  SFUnrecCameraPtr::EditHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Viewport::setCamera,
                    static_cast<Viewport *>(this), _1));

    editSField(CameraFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleRoot            (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfRoot,
             this->getType().getFieldDesc(RootFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleRoot           (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfRoot,
             this->getType().getFieldDesc(RootFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Viewport::setRoot,
                    static_cast<Viewport *>(this), _1));

    editSField(RootFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleBackground      (void) const
{
    SFUnrecBackgroundPtr::GetHandlePtr returnValue(
        new  SFUnrecBackgroundPtr::GetHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleBackground     (void)
{
    SFUnrecBackgroundPtr::EditHandlePtr returnValue(
        new  SFUnrecBackgroundPtr::EditHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Viewport::setBackground,
                    static_cast<Viewport *>(this), _1));

    editSField(BackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleForegrounds     (void) const
{
    MFUnrecForegroundPtr::GetHandlePtr returnValue(
        new  MFUnrecForegroundPtr::GetHandle(
             &_mfForegrounds,
             this->getType().getFieldDesc(ForegroundsFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleForegrounds    (void)
{
    MFUnrecForegroundPtr::EditHandlePtr returnValue(
        new  MFUnrecForegroundPtr::EditHandle(
             &_mfForegrounds,
             this->getType().getFieldDesc(ForegroundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Viewport::addForeground,
                    static_cast<Viewport *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Viewport::removeFromForegrounds,
                    static_cast<Viewport *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Viewport::removeObjFromForegrounds,
                    static_cast<Viewport *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Viewport::clearForegrounds,
                    static_cast<Viewport *>(this)));

    editMField(ForegroundsFieldMask, _mfForegrounds);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleTravMask        (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfTravMask,
             this->getType().getFieldDesc(TravMaskFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleTravMask       (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfTravMask,
             this->getType().getFieldDesc(TravMaskFieldId),
             this));


    editSField(TravMaskFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleEnabled         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleEnabled        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             this));


    editSField(EnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleDrawTime        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfDrawTime,
             this->getType().getFieldDesc(DrawTimeFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleDrawTime       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfDrawTime,
             this->getType().getFieldDesc(DrawTimeFieldId),
             this));


    editSField(DrawTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleDrawableId      (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDrawableId,
             this->getType().getFieldDesc(DrawableIdFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleDrawableId     (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDrawableId,
             this->getType().getFieldDesc(DrawableIdFieldId),
             this));


    editSField(DrawableIdFieldMask);

    return returnValue;
}

GetFieldHandlePtr ViewportBase::getHandleRenderOptions   (void) const
{
    SFUnrecRenderOptionsPtr::GetHandlePtr returnValue(
        new  SFUnrecRenderOptionsPtr::GetHandle(
             &_sfRenderOptions,
             this->getType().getFieldDesc(RenderOptionsFieldId),
             const_cast<ViewportBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ViewportBase::editHandleRenderOptions  (void)
{
    SFUnrecRenderOptionsPtr::EditHandlePtr returnValue(
        new  SFUnrecRenderOptionsPtr::EditHandle(
             &_sfRenderOptions,
             this->getType().getFieldDesc(RenderOptionsFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Viewport::setRenderOptions,
                    static_cast<Viewport *>(this), _1));

    editSField(RenderOptionsFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void ViewportBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Viewport *pThis = static_cast<Viewport *>(this);

    pThis->execSync(static_cast<Viewport *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ViewportBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    Viewport *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Viewport *>(pRefAspect),
                  dynamic_cast<const Viewport *>(this));

    return returnValue;
}
#endif

void ViewportBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Viewport *>(this)->setCamera(NULL);

    static_cast<Viewport *>(this)->setRoot(NULL);

    static_cast<Viewport *>(this)->setBackground(NULL);

    static_cast<Viewport *>(this)->clearForegrounds();

    static_cast<Viewport *>(this)->setRenderOptions(NULL);


}


OSG_END_NAMESPACE
