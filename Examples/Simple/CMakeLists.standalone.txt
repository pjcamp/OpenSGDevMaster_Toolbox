
PROJECT(OpenSGSimpleExamples)

MESSAGE(STATUS "Building simple examples standalone")

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${OpenSGSimpleExamples_SOURCE_DIR}/../../CMake")

# show build command lines
SET(CMAKE_VERBOSE_MAKEFILE ON)

#############################################################################
# find sources

FILE(GLOB SRCFILES "*.cpp")

# stuff that is broken -- these examples need to be fixed
LIST(REMOVE_ITEM SRCFILES "${PROJECT_SOURCE_DIR}/clusterclientshader.cpp")
LIST(REMOVE_ITEM SRCFILES "${PROJECT_SOURCE_DIR}/geometryshader.cpp")
LIST(REMOVE_ITEM SRCFILES "${PROJECT_SOURCE_DIR}/phongshaderwithglmaterials.cpp")
LIST(REMOVE_ITEM SRCFILES "${PROJECT_SOURCE_DIR}/shader.cpp")

#############################################################################
# get dependencies

SET(OSG_COMPONENTS OSGBase 
                   OSGCluster 
                   OSGDrawable 
                   OSGFileIO 
                   OSGGroup 
                   OSGImageFileIO
                   OSGState 
                   OSGSystem 
                   OSGUtil 
                   OSGWindow 
                   OSGWindowGLUT)

IF(UNIX)
    IF(APPLE)
        LIST(APPEND OSG_COMPONENTS OSGWindowCarbon)
    ELSE(APPLE)
        LIST(APPEND OSG_COMPONENTS OSGWindowX)
    ENDIF(APPLE)
ENDIF(UNIX)

IF(WIN32)
    LIST(APPEND OSG_COMPONENTS OSGWindowWIN32)
ENDIF(WIN32)

SET(DEP_INCLUDE_DIRS)
SET(DEP_LIBRARY_DIRS)
SET(DEP_LIBRARIES)

#############
#### GLUT

FIND_PACKAGE(GLUT REQUIRED)
LIST(APPEND DEP_INCLUDE_DIRS ${GLUT_INCLUDE_DIR})
LIST(APPEND DEP_LIBRARIES ${GLUT_LIBRARIES})

#############
#### X11 (optional)

FIND_PACKAGE(X11)

IF(X11_FOUND)
    LIST(APPEND DEP_INCLUDE_DIRS ${X11_X11_INCLUDE_PATH})
    LIST(APPEND DEP_LIBRARIES ${X11_X11_LIB})
ELSE(X11_FOUND)
    LIST(REMOVE_ITEM SRCFILES "${PROJECT_SOURCE_DIR}/clusterserverx.cpp")
ENDIF(X11_FOUND)

#############
#### Collada (optional, depending on how OpenSG was built)

FIND_PACKAGE(Collada)

IF(COLLADA_FOUND)
    LIST(APPEND DEP_INCLUDE_DIRS ${COLLADA_INCLUDE_DIRS})
    LIST(APPEND DEP_LIBRARY_DIRS ${COLLADA_LIBRARY_DIRS})
ENDIF(COLLADA_FOUND)

#############
#### Boost

SET(Boost_USE_MULTITHREAD ON)
SET(Boost_STATIC_LIBS OFF)

IF(COLLADA_FOUND)
    SET(Boost_COMPONENTS filesystem)
    FIND_PACKAGE(Boost COMPONENTS ${Boost_COMPONENTS} REQUIRED)
ELSE(COLLADA_FOUND)
    FIND_PACKAGE(Boost REQUIRED)
ENDIF(COLLADA_FOUND)

FIND_PACKAGE(Boost COMPONENTS ${Boost_COMPONENTS} REQUIRED)

IF(Boost_FOUND AND Boost_MINOR_VERSION GREATER "34")
    SET(Boost_COMPONENTS system ${Boost_COMPONENTS})

    FIND_PACKAGE(Boost COMPONENTS ${Boost_COMPONENTS} REQUIRED)
ENDIF(Boost_FOUND AND Boost_MINOR_VERSION GREATER "34")

IF(Boost_FOUND)
    LIST(APPEND DEP_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
    LIST(APPEND DEP_LIBRARY_DIRS ${Boost_LIBRARY_DIRS})
    LIST(APPEND DEP_LIBRARIES ${Boost_LIBRARIES})
ENDIF(Boost_FOUND)

#############
#### OpenSG

FIND_PACKAGE(OpenSG REQUIRED COMPONENTS ${OSG_COMPONENTS})


#############################################################################
# build executables

FOREACH(SRC ${SRCFILES})

    GET_FILENAME_COMPONENT(EXE ${SRC} NAME_WE)

    INCLUDE_DIRECTORIES(${OpenSG_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${DEP_INCLUDE_DIRS})

    LINK_DIRECTORIES(${OpenSG_LIBRARY_DIRS})
    LINK_DIRECTORIES(${DEP_LIBRARY_DIRS})

    ADD_EXECUTABLE(${EXE} ${SRC})

    TARGET_LINK_LIBRARIES(${EXE} ${OpenSG_LIBRARIES})
    TARGET_LINK_LIBRARIES(${EXE} ${DEP_LIBRARIES})
ENDFOREACH(SRC)
